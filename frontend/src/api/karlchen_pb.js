// source: karlchen.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.api.AuctionState', null, global);
goog.exportSymbol('proto.api.Bid', null, global);
goog.exportSymbol('proto.api.BidType', null, global);
goog.exportSymbol('proto.api.Card', null, global);
goog.exportSymbol('proto.api.Cards', null, global);
goog.exportSymbol('proto.api.Declaration', null, global);
goog.exportSymbol('proto.api.Empty', null, global);
goog.exportSymbol('proto.api.EndOfGame', null, global);
goog.exportSymbol('proto.api.Event', null, global);
goog.exportSymbol('proto.api.Event.EventCase', null, global);
goog.exportSymbol('proto.api.GameState', null, global);
goog.exportSymbol('proto.api.GameType', null, global);
goog.exportSymbol('proto.api.JoinTableRequest', null, global);
goog.exportSymbol('proto.api.MatchPhase', null, global);
goog.exportSymbol('proto.api.MatchState', null, global);
goog.exportSymbol('proto.api.MatchState.DetailsCase', null, global);
goog.exportSymbol('proto.api.MatchState.RoleCase', null, global);
goog.exportSymbol('proto.api.MemberEvent', null, global);
goog.exportSymbol('proto.api.MemberEventType', null, global);
goog.exportSymbol('proto.api.Mode', null, global);
goog.exportSymbol('proto.api.Party', null, global);
goog.exportSymbol('proto.api.PlayRequest', null, global);
goog.exportSymbol('proto.api.PlayRequest.RequestCase', null, global);
goog.exportSymbol('proto.api.PlayedCard', null, global);
goog.exportSymbol('proto.api.PlayerValue', null, global);
goog.exportSymbol('proto.api.Players', null, global);
goog.exportSymbol('proto.api.Rank', null, global);
goog.exportSymbol('proto.api.RegisterReply', null, global);
goog.exportSymbol('proto.api.Suit', null, global);
goog.exportSymbol('proto.api.TableData', null, global);
goog.exportSymbol('proto.api.TableId', null, global);
goog.exportSymbol('proto.api.TableMember', null, global);
goog.exportSymbol('proto.api.TableState', null, global);
goog.exportSymbol('proto.api.TableState.StateCase', null, global);
goog.exportSymbol('proto.api.Trick', null, global);
goog.exportSymbol('proto.api.UserName', null, global);
goog.exportSymbol('proto.api.UserState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Card.displayName = 'proto.api.Card';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PlayerValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PlayerValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PlayerValue.displayName = 'proto.api.PlayerValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Declaration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Declaration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Declaration.displayName = 'proto.api.Declaration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PlayedCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.PlayedCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PlayedCard.displayName = 'proto.api.PlayedCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Bid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Bid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Bid.displayName = 'proto.api.Bid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.EndOfGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.EndOfGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.EndOfGame.displayName = 'proto.api.EndOfGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.Event.oneofGroups_);
};
goog.inherits(proto.api.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Event.displayName = 'proto.api.Event';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.UserState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.UserState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.UserState.displayName = 'proto.api.UserState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.MemberEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.MemberEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.MemberEvent.displayName = 'proto.api.MemberEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.PlayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.PlayRequest.oneofGroups_);
};
goog.inherits(proto.api.PlayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.PlayRequest.displayName = 'proto.api.PlayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AuctionState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.AuctionState.repeatedFields_, null);
};
goog.inherits(proto.api.AuctionState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.AuctionState.displayName = 'proto.api.AuctionState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Mode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Mode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Mode.displayName = 'proto.api.Mode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Trick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Trick.repeatedFields_, null);
};
goog.inherits(proto.api.Trick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Trick.displayName = 'proto.api.Trick';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.GameState.repeatedFields_, null);
};
goog.inherits(proto.api.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.GameState.displayName = 'proto.api.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Cards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Cards.repeatedFields_, null);
};
goog.inherits(proto.api.Cards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Cards.displayName = 'proto.api.Cards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.MatchState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.MatchState.oneofGroups_);
};
goog.inherits(proto.api.MatchState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.MatchState.displayName = 'proto.api.MatchState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Players = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Players, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Players.displayName = 'proto.api.Players';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TableData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.TableData.repeatedFields_, null);
};
goog.inherits(proto.api.TableData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TableData.displayName = 'proto.api.TableData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TableState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.api.TableState.oneofGroups_);
};
goog.inherits(proto.api.TableState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TableState.displayName = 'proto.api.TableState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TableMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TableMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TableMember.displayName = 'proto.api.TableMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.Empty.displayName = 'proto.api.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.UserName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.UserName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.UserName.displayName = 'proto.api.UserName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RegisterReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RegisterReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.RegisterReply.displayName = 'proto.api.RegisterReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TableId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TableId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.TableId.displayName = 'proto.api.TableId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.JoinTableRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.JoinTableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.api.JoinTableRequest.displayName = 'proto.api.JoinTableRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    suit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rank: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Card}
 */
proto.api.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Card;
  return proto.api.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Card}
 */
proto.api.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.Suit} */ (reader.readEnum());
      msg.setSuit(value);
      break;
    case 2:
      var value = /** @type {!proto.api.Rank} */ (reader.readEnum());
      msg.setRank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuit();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRank();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Suit suit = 1;
 * @return {!proto.api.Suit}
 */
proto.api.Card.prototype.getSuit = function() {
  return /** @type {!proto.api.Suit} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.Suit} value
 * @return {!proto.api.Card} returns this
 */
proto.api.Card.prototype.setSuit = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Rank rank = 2;
 * @return {!proto.api.Rank}
 */
proto.api.Card.prototype.getRank = function() {
  return /** @type {!proto.api.Rank} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.api.Rank} value
 * @return {!proto.api.Card} returns this
 */
proto.api.Card.prototype.setRank = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PlayerValue.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PlayerValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PlayerValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlayerValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PlayerValue}
 */
proto.api.PlayerValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PlayerValue;
  return proto.api.PlayerValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PlayerValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PlayerValue}
 */
proto.api.PlayerValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PlayerValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PlayerValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PlayerValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlayerValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.api.PlayerValue.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.PlayerValue} returns this
 */
proto.api.PlayerValue.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Declaration.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Declaration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Declaration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Declaration.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vorbehalt: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    definedgamemode: (f = msg.getDefinedgamemode()) && proto.api.Mode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Declaration}
 */
proto.api.Declaration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Declaration;
  return proto.api.Declaration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Declaration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Declaration}
 */
proto.api.Declaration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVorbehalt(value);
      break;
    case 3:
      var value = new proto.api.Mode;
      reader.readMessage(value,proto.api.Mode.deserializeBinaryFromReader);
      msg.setDefinedgamemode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Declaration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Declaration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Declaration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Declaration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVorbehalt();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDefinedgamemode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Mode.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.api.Declaration.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Declaration} returns this
 */
proto.api.Declaration.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool vorbehalt = 2;
 * @return {boolean}
 */
proto.api.Declaration.prototype.getVorbehalt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.Declaration} returns this
 */
proto.api.Declaration.prototype.setVorbehalt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Mode definedGameMode = 3;
 * @return {?proto.api.Mode}
 */
proto.api.Declaration.prototype.getDefinedgamemode = function() {
  return /** @type{?proto.api.Mode} */ (
    jspb.Message.getWrapperField(this, proto.api.Mode, 3));
};


/**
 * @param {?proto.api.Mode|undefined} value
 * @return {!proto.api.Declaration} returns this
*/
proto.api.Declaration.prototype.setDefinedgamemode = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Declaration} returns this
 */
proto.api.Declaration.prototype.clearDefinedgamemode = function() {
  return this.setDefinedgamemode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Declaration.prototype.hasDefinedgamemode = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PlayedCard.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PlayedCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PlayedCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlayedCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    card: (f = msg.getCard()) && proto.api.Card.toObject(includeInstance, f),
    trickWinner: (f = msg.getTrickWinner()) && proto.api.PlayerValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PlayedCard}
 */
proto.api.PlayedCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PlayedCard;
  return proto.api.PlayedCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PlayedCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PlayedCard}
 */
proto.api.PlayedCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.api.Card;
      reader.readMessage(value,proto.api.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 3:
      var value = new proto.api.PlayerValue;
      reader.readMessage(value,proto.api.PlayerValue.deserializeBinaryFromReader);
      msg.setTrickWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PlayedCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PlayedCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PlayedCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlayedCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Card.serializeBinaryToWriter
    );
  }
  f = message.getTrickWinner();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.PlayerValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.api.PlayedCard.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.PlayedCard} returns this
 */
proto.api.PlayedCard.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Card card = 2;
 * @return {?proto.api.Card}
 */
proto.api.PlayedCard.prototype.getCard = function() {
  return /** @type{?proto.api.Card} */ (
    jspb.Message.getWrapperField(this, proto.api.Card, 2));
};


/**
 * @param {?proto.api.Card|undefined} value
 * @return {!proto.api.PlayedCard} returns this
*/
proto.api.PlayedCard.prototype.setCard = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PlayedCard} returns this
 */
proto.api.PlayedCard.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlayedCard.prototype.hasCard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlayerValue trick_winner = 3;
 * @return {?proto.api.PlayerValue}
 */
proto.api.PlayedCard.prototype.getTrickWinner = function() {
  return /** @type{?proto.api.PlayerValue} */ (
    jspb.Message.getWrapperField(this, proto.api.PlayerValue, 3));
};


/**
 * @param {?proto.api.PlayerValue|undefined} value
 * @return {!proto.api.PlayedCard} returns this
*/
proto.api.PlayedCard.prototype.setTrickWinner = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PlayedCard} returns this
 */
proto.api.PlayedCard.prototype.clearTrickWinner = function() {
  return this.setTrickWinner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlayedCard.prototype.hasTrickWinner = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Bid.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Bid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Bid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Bid.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Bid}
 */
proto.api.Bid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Bid;
  return proto.api.Bid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Bid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Bid}
 */
proto.api.Bid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.api.BidType} */ (reader.readEnum());
      msg.setBid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Bid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Bid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Bid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Bid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBid();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.api.Bid.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Bid} returns this
 */
proto.api.Bid.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BidType bid = 3;
 * @return {!proto.api.BidType}
 */
proto.api.Bid.prototype.getBid = function() {
  return /** @type {!proto.api.BidType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.api.BidType} value
 * @return {!proto.api.Bid} returns this
 */
proto.api.Bid.prototype.setBid = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.EndOfGame.prototype.toObject = function(opt_includeInstance) {
  return proto.api.EndOfGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.EndOfGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.EndOfGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    winner: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.EndOfGame}
 */
proto.api.EndOfGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.EndOfGame;
  return proto.api.EndOfGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.EndOfGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.EndOfGame}
 */
proto.api.EndOfGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.Party} */ (reader.readEnum());
      msg.setWinner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.EndOfGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.EndOfGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.EndOfGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.EndOfGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinner();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Party winner = 1;
 * @return {!proto.api.Party}
 */
proto.api.EndOfGame.prototype.getWinner = function() {
  return /** @type {!proto.api.Party} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.Party} value
 * @return {!proto.api.EndOfGame} returns this
 */
proto.api.EndOfGame.prototype.setWinner = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.api.EndOfGame.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.EndOfGame} returns this
 */
proto.api.EndOfGame.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.Event.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.api.Event.EventCase = {
  EVENT_NOT_SET: 0,
  WELCOME: 1,
  START: 2,
  DECLARED: 3,
  PLAYED_CARD: 4,
  PLACED_BID: 5,
  ENDED: 6,
  MEMBER: 7
};

/**
 * @return {proto.api.Event.EventCase}
 */
proto.api.Event.prototype.getEventCase = function() {
  return /** @type {proto.api.Event.EventCase} */(jspb.Message.computeOneofCase(this, proto.api.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    welcome: (f = msg.getWelcome()) && proto.api.UserState.toObject(includeInstance, f),
    start: (f = msg.getStart()) && proto.api.MatchState.toObject(includeInstance, f),
    declared: (f = msg.getDeclared()) && proto.api.Declaration.toObject(includeInstance, f),
    playedCard: (f = msg.getPlayedCard()) && proto.api.PlayedCard.toObject(includeInstance, f),
    placedBid: (f = msg.getPlacedBid()) && proto.api.Bid.toObject(includeInstance, f),
    ended: (f = msg.getEnded()) && proto.api.EndOfGame.toObject(includeInstance, f),
    member: (f = msg.getMember()) && proto.api.MemberEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Event}
 */
proto.api.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Event;
  return proto.api.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Event}
 */
proto.api.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.UserState;
      reader.readMessage(value,proto.api.UserState.deserializeBinaryFromReader);
      msg.setWelcome(value);
      break;
    case 2:
      var value = new proto.api.MatchState;
      reader.readMessage(value,proto.api.MatchState.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 3:
      var value = new proto.api.Declaration;
      reader.readMessage(value,proto.api.Declaration.deserializeBinaryFromReader);
      msg.setDeclared(value);
      break;
    case 4:
      var value = new proto.api.PlayedCard;
      reader.readMessage(value,proto.api.PlayedCard.deserializeBinaryFromReader);
      msg.setPlayedCard(value);
      break;
    case 5:
      var value = new proto.api.Bid;
      reader.readMessage(value,proto.api.Bid.deserializeBinaryFromReader);
      msg.setPlacedBid(value);
      break;
    case 6:
      var value = new proto.api.EndOfGame;
      reader.readMessage(value,proto.api.EndOfGame.deserializeBinaryFromReader);
      msg.setEnded(value);
      break;
    case 7:
      var value = new proto.api.MemberEvent;
      reader.readMessage(value,proto.api.MemberEvent.deserializeBinaryFromReader);
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWelcome();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.UserState.serializeBinaryToWriter
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.MatchState.serializeBinaryToWriter
    );
  }
  f = message.getDeclared();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Declaration.serializeBinaryToWriter
    );
  }
  f = message.getPlayedCard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.PlayedCard.serializeBinaryToWriter
    );
  }
  f = message.getPlacedBid();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Bid.serializeBinaryToWriter
    );
  }
  f = message.getEnded();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.EndOfGame.serializeBinaryToWriter
    );
  }
  f = message.getMember();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.MemberEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserState welcome = 1;
 * @return {?proto.api.UserState}
 */
proto.api.Event.prototype.getWelcome = function() {
  return /** @type{?proto.api.UserState} */ (
    jspb.Message.getWrapperField(this, proto.api.UserState, 1));
};


/**
 * @param {?proto.api.UserState|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setWelcome = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearWelcome = function() {
  return this.setWelcome(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasWelcome = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchState start = 2;
 * @return {?proto.api.MatchState}
 */
proto.api.Event.prototype.getStart = function() {
  return /** @type{?proto.api.MatchState} */ (
    jspb.Message.getWrapperField(this, proto.api.MatchState, 2));
};


/**
 * @param {?proto.api.MatchState|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Declaration declared = 3;
 * @return {?proto.api.Declaration}
 */
proto.api.Event.prototype.getDeclared = function() {
  return /** @type{?proto.api.Declaration} */ (
    jspb.Message.getWrapperField(this, proto.api.Declaration, 3));
};


/**
 * @param {?proto.api.Declaration|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setDeclared = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearDeclared = function() {
  return this.setDeclared(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasDeclared = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlayedCard played_card = 4;
 * @return {?proto.api.PlayedCard}
 */
proto.api.Event.prototype.getPlayedCard = function() {
  return /** @type{?proto.api.PlayedCard} */ (
    jspb.Message.getWrapperField(this, proto.api.PlayedCard, 4));
};


/**
 * @param {?proto.api.PlayedCard|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setPlayedCard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearPlayedCard = function() {
  return this.setPlayedCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasPlayedCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Bid placed_bid = 5;
 * @return {?proto.api.Bid}
 */
proto.api.Event.prototype.getPlacedBid = function() {
  return /** @type{?proto.api.Bid} */ (
    jspb.Message.getWrapperField(this, proto.api.Bid, 5));
};


/**
 * @param {?proto.api.Bid|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setPlacedBid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearPlacedBid = function() {
  return this.setPlacedBid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasPlacedBid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EndOfGame ended = 6;
 * @return {?proto.api.EndOfGame}
 */
proto.api.Event.prototype.getEnded = function() {
  return /** @type{?proto.api.EndOfGame} */ (
    jspb.Message.getWrapperField(this, proto.api.EndOfGame, 6));
};


/**
 * @param {?proto.api.EndOfGame|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setEnded = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearEnded = function() {
  return this.setEnded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasEnded = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MemberEvent member = 7;
 * @return {?proto.api.MemberEvent}
 */
proto.api.Event.prototype.getMember = function() {
  return /** @type{?proto.api.MemberEvent} */ (
    jspb.Message.getWrapperField(this, proto.api.MemberEvent, 7));
};


/**
 * @param {?proto.api.MemberEvent|undefined} value
 * @return {!proto.api.Event} returns this
*/
proto.api.Event.prototype.setMember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.Event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Event} returns this
 */
proto.api.Event.prototype.clearMember = function() {
  return this.setMember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Event.prototype.hasMember = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.UserState.prototype.toObject = function(opt_includeInstance) {
  return proto.api.UserState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.UserState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UserState.toObject = function(includeInstance, msg) {
  var f, obj = {
    currenttable: (f = msg.getCurrenttable()) && proto.api.TableState.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.UserState}
 */
proto.api.UserState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.UserState;
  return proto.api.UserState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.UserState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.UserState}
 */
proto.api.UserState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TableState;
      reader.readMessage(value,proto.api.TableState.deserializeBinaryFromReader);
      msg.setCurrenttable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.UserState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.UserState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.UserState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UserState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrenttable();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.TableState.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TableState currentTable = 1;
 * @return {?proto.api.TableState}
 */
proto.api.UserState.prototype.getCurrenttable = function() {
  return /** @type{?proto.api.TableState} */ (
    jspb.Message.getWrapperField(this, proto.api.TableState, 1));
};


/**
 * @param {?proto.api.TableState|undefined} value
 * @return {!proto.api.UserState} returns this
*/
proto.api.UserState.prototype.setCurrenttable = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.UserState} returns this
 */
proto.api.UserState.prototype.clearCurrenttable = function() {
  return this.setCurrenttable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.UserState.prototype.hasCurrenttable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.UserState.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.UserState} returns this
 */
proto.api.UserState.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.MemberEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.api.MemberEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.MemberEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.MemberEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.MemberEvent}
 */
proto.api.MemberEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.MemberEvent;
  return proto.api.MemberEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.MemberEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.MemberEvent}
 */
proto.api.MemberEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.api.MemberEventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.MemberEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.MemberEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.MemberEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.MemberEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.api.MemberEvent.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.MemberEvent} returns this
 */
proto.api.MemberEvent.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.MemberEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.MemberEvent} returns this
 */
proto.api.MemberEvent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MemberEventType type = 3;
 * @return {!proto.api.MemberEventType}
 */
proto.api.MemberEvent.prototype.getType = function() {
  return /** @type {!proto.api.MemberEventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.api.MemberEventType} value
 * @return {!proto.api.MemberEvent} returns this
 */
proto.api.MemberEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.PlayRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.api.PlayRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  DECLARATION: 2,
  BID: 3,
  CARD: 4
};

/**
 * @return {proto.api.PlayRequest.RequestCase}
 */
proto.api.PlayRequest.prototype.getRequestCase = function() {
  return /** @type {proto.api.PlayRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.api.PlayRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.PlayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.PlayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.PlayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    declaration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    card: (f = msg.getCard()) && proto.api.Card.toObject(includeInstance, f),
    table: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.PlayRequest}
 */
proto.api.PlayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.PlayRequest;
  return proto.api.PlayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.PlayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.PlayRequest}
 */
proto.api.PlayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.api.GameType} */ (reader.readEnum());
      msg.setDeclaration(value);
      break;
    case 3:
      var value = /** @type {!proto.api.BidType} */ (reader.readEnum());
      msg.setBid(value);
      break;
    case 4:
      var value = new proto.api.Card;
      reader.readMessage(value,proto.api.Card.deserializeBinaryFromReader);
      msg.setCard(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.PlayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.PlayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.PlayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.PlayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.api.GameType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.api.BidType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Card.serializeBinaryToWriter
    );
  }
  f = message.getTable();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional GameType declaration = 2;
 * @return {!proto.api.GameType}
 */
proto.api.PlayRequest.prototype.getDeclaration = function() {
  return /** @type {!proto.api.GameType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.api.GameType} value
 * @return {!proto.api.PlayRequest} returns this
 */
proto.api.PlayRequest.prototype.setDeclaration = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.api.PlayRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.PlayRequest} returns this
 */
proto.api.PlayRequest.prototype.clearDeclaration = function() {
  return jspb.Message.setOneofField(this, 2, proto.api.PlayRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlayRequest.prototype.hasDeclaration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BidType bid = 3;
 * @return {!proto.api.BidType}
 */
proto.api.PlayRequest.prototype.getBid = function() {
  return /** @type {!proto.api.BidType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.api.BidType} value
 * @return {!proto.api.PlayRequest} returns this
 */
proto.api.PlayRequest.prototype.setBid = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.api.PlayRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.api.PlayRequest} returns this
 */
proto.api.PlayRequest.prototype.clearBid = function() {
  return jspb.Message.setOneofField(this, 3, proto.api.PlayRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlayRequest.prototype.hasBid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Card card = 4;
 * @return {?proto.api.Card}
 */
proto.api.PlayRequest.prototype.getCard = function() {
  return /** @type{?proto.api.Card} */ (
    jspb.Message.getWrapperField(this, proto.api.Card, 4));
};


/**
 * @param {?proto.api.Card|undefined} value
 * @return {!proto.api.PlayRequest} returns this
*/
proto.api.PlayRequest.prototype.setCard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.PlayRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.PlayRequest} returns this
 */
proto.api.PlayRequest.prototype.clearCard = function() {
  return this.setCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.PlayRequest.prototype.hasCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string table = 5;
 * @return {string}
 */
proto.api.PlayRequest.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.PlayRequest} returns this
 */
proto.api.PlayRequest.prototype.setTable = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.AuctionState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AuctionState.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AuctionState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AuctionState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AuctionState.toObject = function(includeInstance, msg) {
  var f, obj = {
    declarationsList: jspb.Message.toObjectList(msg.getDeclarationsList(),
    proto.api.Declaration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AuctionState}
 */
proto.api.AuctionState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AuctionState;
  return proto.api.AuctionState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AuctionState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AuctionState}
 */
proto.api.AuctionState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Declaration;
      reader.readMessage(value,proto.api.Declaration.deserializeBinaryFromReader);
      msg.addDeclarations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AuctionState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AuctionState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AuctionState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AuctionState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeclarationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Declaration.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Declaration declarations = 1;
 * @return {!Array<!proto.api.Declaration>}
 */
proto.api.AuctionState.prototype.getDeclarationsList = function() {
  return /** @type{!Array<!proto.api.Declaration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Declaration, 1));
};


/**
 * @param {!Array<!proto.api.Declaration>} value
 * @return {!proto.api.AuctionState} returns this
*/
proto.api.AuctionState.prototype.setDeclarationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Declaration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Declaration}
 */
proto.api.AuctionState.prototype.addDeclarations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Declaration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.AuctionState} returns this
 */
proto.api.AuctionState.prototype.clearDeclarationsList = function() {
  return this.setDeclarationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Mode.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Mode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Mode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Mode.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    soloist: (f = msg.getSoloist()) && proto.api.PlayerValue.toObject(includeInstance, f),
    spouse: (f = msg.getSpouse()) && proto.api.PlayerValue.toObject(includeInstance, f),
    forehand: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Mode}
 */
proto.api.Mode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Mode;
  return proto.api.Mode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Mode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Mode}
 */
proto.api.Mode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.GameType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.api.PlayerValue;
      reader.readMessage(value,proto.api.PlayerValue.deserializeBinaryFromReader);
      msg.setSoloist(value);
      break;
    case 3:
      var value = new proto.api.PlayerValue;
      reader.readMessage(value,proto.api.PlayerValue.deserializeBinaryFromReader);
      msg.setSpouse(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setForehand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Mode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Mode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Mode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Mode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSoloist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.PlayerValue.serializeBinaryToWriter
    );
  }
  f = message.getSpouse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.PlayerValue.serializeBinaryToWriter
    );
  }
  f = message.getForehand();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional GameType type = 1;
 * @return {!proto.api.GameType}
 */
proto.api.Mode.prototype.getType = function() {
  return /** @type {!proto.api.GameType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.GameType} value
 * @return {!proto.api.Mode} returns this
 */
proto.api.Mode.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PlayerValue soloist = 2;
 * @return {?proto.api.PlayerValue}
 */
proto.api.Mode.prototype.getSoloist = function() {
  return /** @type{?proto.api.PlayerValue} */ (
    jspb.Message.getWrapperField(this, proto.api.PlayerValue, 2));
};


/**
 * @param {?proto.api.PlayerValue|undefined} value
 * @return {!proto.api.Mode} returns this
*/
proto.api.Mode.prototype.setSoloist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Mode} returns this
 */
proto.api.Mode.prototype.clearSoloist = function() {
  return this.setSoloist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Mode.prototype.hasSoloist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlayerValue spouse = 3;
 * @return {?proto.api.PlayerValue}
 */
proto.api.Mode.prototype.getSpouse = function() {
  return /** @type{?proto.api.PlayerValue} */ (
    jspb.Message.getWrapperField(this, proto.api.PlayerValue, 3));
};


/**
 * @param {?proto.api.PlayerValue|undefined} value
 * @return {!proto.api.Mode} returns this
*/
proto.api.Mode.prototype.setSpouse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Mode} returns this
 */
proto.api.Mode.prototype.clearSpouse = function() {
  return this.setSpouse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Mode.prototype.hasSpouse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string forehand = 4;
 * @return {string}
 */
proto.api.Mode.prototype.getForehand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Mode} returns this
 */
proto.api.Mode.prototype.setForehand = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Trick.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Trick.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Trick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Trick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Trick.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.api.Card.toObject, includeInstance),
    userIdForehand: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userIdWinner: (f = msg.getUserIdWinner()) && proto.api.PlayerValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Trick}
 */
proto.api.Trick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Trick;
  return proto.api.Trick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Trick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Trick}
 */
proto.api.Trick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Card;
      reader.readMessage(value,proto.api.Card.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdForehand(value);
      break;
    case 6:
      var value = new proto.api.PlayerValue;
      reader.readMessage(value,proto.api.PlayerValue.deserializeBinaryFromReader);
      msg.setUserIdWinner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Trick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Trick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Trick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Trick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Card.serializeBinaryToWriter
    );
  }
  f = message.getUserIdForehand();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserIdWinner();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.PlayerValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card cards = 1;
 * @return {!Array<!proto.api.Card>}
 */
proto.api.Trick.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.api.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Card, 1));
};


/**
 * @param {!Array<!proto.api.Card>} value
 * @return {!proto.api.Trick} returns this
*/
proto.api.Trick.prototype.setCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Card}
 */
proto.api.Trick.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Trick} returns this
 */
proto.api.Trick.prototype.clearCardsList = function() {
  return this.setCardsList([]);
};


/**
 * optional string user_id_forehand = 5;
 * @return {string}
 */
proto.api.Trick.prototype.getUserIdForehand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Trick} returns this
 */
proto.api.Trick.prototype.setUserIdForehand = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional PlayerValue user_id_winner = 6;
 * @return {?proto.api.PlayerValue}
 */
proto.api.Trick.prototype.getUserIdWinner = function() {
  return /** @type{?proto.api.PlayerValue} */ (
    jspb.Message.getWrapperField(this, proto.api.PlayerValue, 6));
};


/**
 * @param {?proto.api.PlayerValue|undefined} value
 * @return {!proto.api.Trick} returns this
*/
proto.api.Trick.prototype.setUserIdWinner = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.Trick} returns this
 */
proto.api.Trick.prototype.clearUserIdWinner = function() {
  return this.setUserIdWinner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.Trick.prototype.hasUserIdWinner = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.GameState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    bidsList: jspb.Message.toObjectList(msg.getBidsList(),
    proto.api.Bid.toObject, includeInstance),
    completedTricks: jspb.Message.getFieldWithDefault(msg, 2, 0),
    currentTrick: (f = msg.getCurrentTrick()) && proto.api.Trick.toObject(includeInstance, f),
    previousTrick: (f = msg.getPreviousTrick()) && proto.api.Trick.toObject(includeInstance, f),
    mode: (f = msg.getMode()) && proto.api.Mode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GameState}
 */
proto.api.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GameState;
  return proto.api.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GameState}
 */
proto.api.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Bid;
      reader.readMessage(value,proto.api.Bid.deserializeBinaryFromReader);
      msg.addBids(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompletedTricks(value);
      break;
    case 3:
      var value = new proto.api.Trick;
      reader.readMessage(value,proto.api.Trick.deserializeBinaryFromReader);
      msg.setCurrentTrick(value);
      break;
    case 4:
      var value = new proto.api.Trick;
      reader.readMessage(value,proto.api.Trick.deserializeBinaryFromReader);
      msg.setPreviousTrick(value);
      break;
    case 5:
      var value = new proto.api.Mode;
      reader.readMessage(value,proto.api.Mode.deserializeBinaryFromReader);
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Bid.serializeBinaryToWriter
    );
  }
  f = message.getCompletedTricks();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCurrentTrick();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Trick.serializeBinaryToWriter
    );
  }
  f = message.getPreviousTrick();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Trick.serializeBinaryToWriter
    );
  }
  f = message.getMode();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Mode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Bid bids = 1;
 * @return {!Array<!proto.api.Bid>}
 */
proto.api.GameState.prototype.getBidsList = function() {
  return /** @type{!Array<!proto.api.Bid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Bid, 1));
};


/**
 * @param {!Array<!proto.api.Bid>} value
 * @return {!proto.api.GameState} returns this
*/
proto.api.GameState.prototype.setBidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Bid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Bid}
 */
proto.api.GameState.prototype.addBids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Bid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.GameState} returns this
 */
proto.api.GameState.prototype.clearBidsList = function() {
  return this.setBidsList([]);
};


/**
 * optional int32 completed_tricks = 2;
 * @return {number}
 */
proto.api.GameState.prototype.getCompletedTricks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.api.GameState} returns this
 */
proto.api.GameState.prototype.setCompletedTricks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Trick current_trick = 3;
 * @return {?proto.api.Trick}
 */
proto.api.GameState.prototype.getCurrentTrick = function() {
  return /** @type{?proto.api.Trick} */ (
    jspb.Message.getWrapperField(this, proto.api.Trick, 3));
};


/**
 * @param {?proto.api.Trick|undefined} value
 * @return {!proto.api.GameState} returns this
*/
proto.api.GameState.prototype.setCurrentTrick = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GameState} returns this
 */
proto.api.GameState.prototype.clearCurrentTrick = function() {
  return this.setCurrentTrick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GameState.prototype.hasCurrentTrick = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Trick previous_trick = 4;
 * @return {?proto.api.Trick}
 */
proto.api.GameState.prototype.getPreviousTrick = function() {
  return /** @type{?proto.api.Trick} */ (
    jspb.Message.getWrapperField(this, proto.api.Trick, 4));
};


/**
 * @param {?proto.api.Trick|undefined} value
 * @return {!proto.api.GameState} returns this
*/
proto.api.GameState.prototype.setPreviousTrick = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GameState} returns this
 */
proto.api.GameState.prototype.clearPreviousTrick = function() {
  return this.setPreviousTrick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GameState.prototype.hasPreviousTrick = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Mode mode = 5;
 * @return {?proto.api.Mode}
 */
proto.api.GameState.prototype.getMode = function() {
  return /** @type{?proto.api.Mode} */ (
    jspb.Message.getWrapperField(this, proto.api.Mode, 5));
};


/**
 * @param {?proto.api.Mode|undefined} value
 * @return {!proto.api.GameState} returns this
*/
proto.api.GameState.prototype.setMode = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.GameState} returns this
 */
proto.api.GameState.prototype.clearMode = function() {
  return this.setMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.GameState.prototype.hasMode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Cards.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Cards.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Cards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Cards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Cards.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardsList: jspb.Message.toObjectList(msg.getCardsList(),
    proto.api.Card.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Cards}
 */
proto.api.Cards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Cards;
  return proto.api.Cards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Cards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Cards}
 */
proto.api.Cards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Card;
      reader.readMessage(value,proto.api.Card.deserializeBinaryFromReader);
      msg.addCards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Cards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Cards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Cards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Cards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Card.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Card cards = 1;
 * @return {!Array<!proto.api.Card>}
 */
proto.api.Cards.prototype.getCardsList = function() {
  return /** @type{!Array<!proto.api.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Card, 1));
};


/**
 * @param {!Array<!proto.api.Card>} value
 * @return {!proto.api.Cards} returns this
*/
proto.api.Cards.prototype.setCardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Card}
 */
proto.api.Cards.prototype.addCards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.Cards} returns this
 */
proto.api.Cards.prototype.clearCardsList = function() {
  return this.setCardsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.MatchState.oneofGroups_ = [[4,5],[6,7]];

/**
 * @enum {number}
 */
proto.api.MatchState.RoleCase = {
  ROLE_NOT_SET: 0,
  SPECTATOR: 4,
  OWN_CARDS: 5
};

/**
 * @return {proto.api.MatchState.RoleCase}
 */
proto.api.MatchState.prototype.getRoleCase = function() {
  return /** @type {proto.api.MatchState.RoleCase} */(jspb.Message.computeOneofCase(this, proto.api.MatchState.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.api.MatchState.DetailsCase = {
  DETAILS_NOT_SET: 0,
  AUCTION_STATE: 6,
  GAME_STATE: 7
};

/**
 * @return {proto.api.MatchState.DetailsCase}
 */
proto.api.MatchState.prototype.getDetailsCase = function() {
  return /** @type {proto.api.MatchState.DetailsCase} */(jspb.Message.computeOneofCase(this, proto.api.MatchState.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.MatchState.prototype.toObject = function(opt_includeInstance) {
  return proto.api.MatchState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.MatchState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.MatchState.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, 0),
    turn: (f = msg.getTurn()) && proto.api.PlayerValue.toObject(includeInstance, f),
    players: (f = msg.getPlayers()) && proto.api.Players.toObject(includeInstance, f),
    spectator: (f = msg.getSpectator()) && proto.api.Empty.toObject(includeInstance, f),
    ownCards: (f = msg.getOwnCards()) && proto.api.Cards.toObject(includeInstance, f),
    auctionState: (f = msg.getAuctionState()) && proto.api.AuctionState.toObject(includeInstance, f),
    gameState: (f = msg.getGameState()) && proto.api.GameState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.MatchState}
 */
proto.api.MatchState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.MatchState;
  return proto.api.MatchState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.MatchState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.MatchState}
 */
proto.api.MatchState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.api.MatchPhase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = new proto.api.PlayerValue;
      reader.readMessage(value,proto.api.PlayerValue.deserializeBinaryFromReader);
      msg.setTurn(value);
      break;
    case 3:
      var value = new proto.api.Players;
      reader.readMessage(value,proto.api.Players.deserializeBinaryFromReader);
      msg.setPlayers(value);
      break;
    case 4:
      var value = new proto.api.Empty;
      reader.readMessage(value,proto.api.Empty.deserializeBinaryFromReader);
      msg.setSpectator(value);
      break;
    case 5:
      var value = new proto.api.Cards;
      reader.readMessage(value,proto.api.Cards.deserializeBinaryFromReader);
      msg.setOwnCards(value);
      break;
    case 6:
      var value = new proto.api.AuctionState;
      reader.readMessage(value,proto.api.AuctionState.deserializeBinaryFromReader);
      msg.setAuctionState(value);
      break;
    case 7:
      var value = new proto.api.GameState;
      reader.readMessage(value,proto.api.GameState.deserializeBinaryFromReader);
      msg.setGameState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.MatchState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.MatchState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.MatchState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.MatchState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTurn();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.PlayerValue.serializeBinaryToWriter
    );
  }
  f = message.getPlayers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Players.serializeBinaryToWriter
    );
  }
  f = message.getSpectator();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Empty.serializeBinaryToWriter
    );
  }
  f = message.getOwnCards();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Cards.serializeBinaryToWriter
    );
  }
  f = message.getAuctionState();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.AuctionState.serializeBinaryToWriter
    );
  }
  f = message.getGameState();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.api.GameState.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchPhase phase = 1;
 * @return {!proto.api.MatchPhase}
 */
proto.api.MatchState.prototype.getPhase = function() {
  return /** @type {!proto.api.MatchPhase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.api.MatchPhase} value
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.setPhase = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PlayerValue turn = 2;
 * @return {?proto.api.PlayerValue}
 */
proto.api.MatchState.prototype.getTurn = function() {
  return /** @type{?proto.api.PlayerValue} */ (
    jspb.Message.getWrapperField(this, proto.api.PlayerValue, 2));
};


/**
 * @param {?proto.api.PlayerValue|undefined} value
 * @return {!proto.api.MatchState} returns this
*/
proto.api.MatchState.prototype.setTurn = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.clearTurn = function() {
  return this.setTurn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.MatchState.prototype.hasTurn = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Players players = 3;
 * @return {?proto.api.Players}
 */
proto.api.MatchState.prototype.getPlayers = function() {
  return /** @type{?proto.api.Players} */ (
    jspb.Message.getWrapperField(this, proto.api.Players, 3));
};


/**
 * @param {?proto.api.Players|undefined} value
 * @return {!proto.api.MatchState} returns this
*/
proto.api.MatchState.prototype.setPlayers = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.clearPlayers = function() {
  return this.setPlayers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.MatchState.prototype.hasPlayers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Empty spectator = 4;
 * @return {?proto.api.Empty}
 */
proto.api.MatchState.prototype.getSpectator = function() {
  return /** @type{?proto.api.Empty} */ (
    jspb.Message.getWrapperField(this, proto.api.Empty, 4));
};


/**
 * @param {?proto.api.Empty|undefined} value
 * @return {!proto.api.MatchState} returns this
*/
proto.api.MatchState.prototype.setSpectator = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.api.MatchState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.clearSpectator = function() {
  return this.setSpectator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.MatchState.prototype.hasSpectator = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Cards own_cards = 5;
 * @return {?proto.api.Cards}
 */
proto.api.MatchState.prototype.getOwnCards = function() {
  return /** @type{?proto.api.Cards} */ (
    jspb.Message.getWrapperField(this, proto.api.Cards, 5));
};


/**
 * @param {?proto.api.Cards|undefined} value
 * @return {!proto.api.MatchState} returns this
*/
proto.api.MatchState.prototype.setOwnCards = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.api.MatchState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.clearOwnCards = function() {
  return this.setOwnCards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.MatchState.prototype.hasOwnCards = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AuctionState auction_state = 6;
 * @return {?proto.api.AuctionState}
 */
proto.api.MatchState.prototype.getAuctionState = function() {
  return /** @type{?proto.api.AuctionState} */ (
    jspb.Message.getWrapperField(this, proto.api.AuctionState, 6));
};


/**
 * @param {?proto.api.AuctionState|undefined} value
 * @return {!proto.api.MatchState} returns this
*/
proto.api.MatchState.prototype.setAuctionState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.api.MatchState.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.clearAuctionState = function() {
  return this.setAuctionState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.MatchState.prototype.hasAuctionState = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GameState game_state = 7;
 * @return {?proto.api.GameState}
 */
proto.api.MatchState.prototype.getGameState = function() {
  return /** @type{?proto.api.GameState} */ (
    jspb.Message.getWrapperField(this, proto.api.GameState, 7));
};


/**
 * @param {?proto.api.GameState|undefined} value
 * @return {!proto.api.MatchState} returns this
*/
proto.api.MatchState.prototype.setGameState = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.api.MatchState.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.MatchState} returns this
 */
proto.api.MatchState.prototype.clearGameState = function() {
  return this.setGameState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.MatchState.prototype.hasGameState = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Players.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Players.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Players} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Players.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdSelf: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userIdLeft: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userIdFace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userIdRight: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Players}
 */
proto.api.Players.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Players;
  return proto.api.Players.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Players} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Players}
 */
proto.api.Players.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdSelf(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdLeft(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdFace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserIdRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Players.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Players.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Players} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Players.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdSelf();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserIdLeft();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserIdFace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserIdRight();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string user_id_self = 1;
 * @return {string}
 */
proto.api.Players.prototype.getUserIdSelf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Players} returns this
 */
proto.api.Players.prototype.setUserIdSelf = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id_left = 2;
 * @return {string}
 */
proto.api.Players.prototype.getUserIdLeft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Players} returns this
 */
proto.api.Players.prototype.setUserIdLeft = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_id_face = 3;
 * @return {string}
 */
proto.api.Players.prototype.getUserIdFace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Players} returns this
 */
proto.api.Players.prototype.setUserIdFace = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_id_right = 4;
 * @return {string}
 */
proto.api.Players.prototype.getUserIdRight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.Players} returns this
 */
proto.api.Players.prototype.setUserIdRight = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.TableData.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TableData.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TableData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TableData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableData.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inviteCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.api.TableMember.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TableData}
 */
proto.api.TableData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TableData;
  return proto.api.TableData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TableData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TableData}
 */
proto.api.TableData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteCode(value);
      break;
    case 4:
      var value = new proto.api.TableMember;
      reader.readMessage(value,proto.api.TableMember.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TableData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TableData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TableData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInviteCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.api.TableMember.serializeBinaryToWriter
    );
  }
};


/**
 * optional string table_id = 1;
 * @return {string}
 */
proto.api.TableData.prototype.getTableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TableData} returns this
 */
proto.api.TableData.prototype.setTableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string owner = 2;
 * @return {string}
 */
proto.api.TableData.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TableData} returns this
 */
proto.api.TableData.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string invite_code = 3;
 * @return {string}
 */
proto.api.TableData.prototype.getInviteCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TableData} returns this
 */
proto.api.TableData.prototype.setInviteCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated TableMember members = 4;
 * @return {!Array<!proto.api.TableMember>}
 */
proto.api.TableData.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.api.TableMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.TableMember, 4));
};


/**
 * @param {!Array<!proto.api.TableMember>} value
 * @return {!proto.api.TableData} returns this
*/
proto.api.TableData.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.api.TableMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.TableMember}
 */
proto.api.TableData.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.api.TableMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.api.TableData} returns this
 */
proto.api.TableData.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.api.TableState.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.api.TableState.StateCase = {
  STATE_NOT_SET: 0,
  IN_MATCH: 1,
  NO_MATCH: 2
};

/**
 * @return {proto.api.TableState.StateCase}
 */
proto.api.TableState.prototype.getStateCase = function() {
  return /** @type {proto.api.TableState.StateCase} */(jspb.Message.computeOneofCase(this, proto.api.TableState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TableState.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TableState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TableState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableState.toObject = function(includeInstance, msg) {
  var f, obj = {
    inMatch: (f = msg.getInMatch()) && proto.api.MatchState.toObject(includeInstance, f),
    noMatch: (f = msg.getNoMatch()) && proto.api.Empty.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.api.TableData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TableState}
 */
proto.api.TableState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TableState;
  return proto.api.TableState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TableState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TableState}
 */
proto.api.TableState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.MatchState;
      reader.readMessage(value,proto.api.MatchState.deserializeBinaryFromReader);
      msg.setInMatch(value);
      break;
    case 2:
      var value = new proto.api.Empty;
      reader.readMessage(value,proto.api.Empty.deserializeBinaryFromReader);
      msg.setNoMatch(value);
      break;
    case 3:
      var value = new proto.api.TableData;
      reader.readMessage(value,proto.api.TableData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TableState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TableState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TableState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.MatchState.serializeBinaryToWriter
    );
  }
  f = message.getNoMatch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Empty.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.TableData.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchState in_match = 1;
 * @return {?proto.api.MatchState}
 */
proto.api.TableState.prototype.getInMatch = function() {
  return /** @type{?proto.api.MatchState} */ (
    jspb.Message.getWrapperField(this, proto.api.MatchState, 1));
};


/**
 * @param {?proto.api.MatchState|undefined} value
 * @return {!proto.api.TableState} returns this
*/
proto.api.TableState.prototype.setInMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.api.TableState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TableState} returns this
 */
proto.api.TableState.prototype.clearInMatch = function() {
  return this.setInMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TableState.prototype.hasInMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Empty no_match = 2;
 * @return {?proto.api.Empty}
 */
proto.api.TableState.prototype.getNoMatch = function() {
  return /** @type{?proto.api.Empty} */ (
    jspb.Message.getWrapperField(this, proto.api.Empty, 2));
};


/**
 * @param {?proto.api.Empty|undefined} value
 * @return {!proto.api.TableState} returns this
*/
proto.api.TableState.prototype.setNoMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.api.TableState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TableState} returns this
 */
proto.api.TableState.prototype.clearNoMatch = function() {
  return this.setNoMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TableState.prototype.hasNoMatch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TableData data = 3;
 * @return {?proto.api.TableData}
 */
proto.api.TableState.prototype.getData = function() {
  return /** @type{?proto.api.TableData} */ (
    jspb.Message.getWrapperField(this, proto.api.TableData, 3));
};


/**
 * @param {?proto.api.TableData|undefined} value
 * @return {!proto.api.TableState} returns this
*/
proto.api.TableState.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.api.TableState} returns this
 */
proto.api.TableState.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.api.TableState.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TableMember.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TableMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TableMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TableMember}
 */
proto.api.TableMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TableMember;
  return proto.api.TableMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TableMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TableMember}
 */
proto.api.TableMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TableMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TableMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TableMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.api.TableMember.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TableMember} returns this
 */
proto.api.TableMember.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.TableMember.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TableMember} returns this
 */
proto.api.TableMember.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool online = 3;
 * @return {boolean}
 */
proto.api.TableMember.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.api.TableMember} returns this
 */
proto.api.TableMember.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Empty}
 */
proto.api.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Empty;
  return proto.api.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Empty}
 */
proto.api.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.UserName.prototype.toObject = function(opt_includeInstance) {
  return proto.api.UserName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.UserName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UserName.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.UserName}
 */
proto.api.UserName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.UserName;
  return proto.api.UserName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.UserName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.UserName}
 */
proto.api.UserName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.UserName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.UserName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.UserName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.UserName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.api.UserName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.UserName} returns this
 */
proto.api.UserName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RegisterReply.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RegisterReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RegisterReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RegisterReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secret: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RegisterReply}
 */
proto.api.RegisterReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RegisterReply;
  return proto.api.RegisterReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RegisterReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RegisterReply}
 */
proto.api.RegisterReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RegisterReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RegisterReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RegisterReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RegisterReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.RegisterReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RegisterReply} returns this
 */
proto.api.RegisterReply.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.api.RegisterReply.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.RegisterReply} returns this
 */
proto.api.RegisterReply.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TableId.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TableId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TableId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableId.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TableId}
 */
proto.api.TableId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TableId;
  return proto.api.TableId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TableId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TableId}
 */
proto.api.TableId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TableId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TableId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TableId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TableId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.api.TableId.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.TableId} returns this
 */
proto.api.TableId.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.JoinTableRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.JoinTableRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.JoinTableRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JoinTableRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.JoinTableRequest}
 */
proto.api.JoinTableRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.JoinTableRequest;
  return proto.api.JoinTableRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.JoinTableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.JoinTableRequest}
 */
proto.api.JoinTableRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.JoinTableRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.JoinTableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.JoinTableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.JoinTableRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table_id = 1;
 * @return {string}
 */
proto.api.JoinTableRequest.prototype.getTableId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.JoinTableRequest} returns this
 */
proto.api.JoinTableRequest.prototype.setTableId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string invite_code = 2;
 * @return {string}
 */
proto.api.JoinTableRequest.prototype.getInviteCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.api.JoinTableRequest} returns this
 */
proto.api.JoinTableRequest.prototype.setInviteCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.api.MemberEventType = {
  JOIN_TABLE: 0,
  LEAVE_TABLE: 1,
  GO_OFFLINE: 2,
  GO_ONLINE: 3
};

/**
 * @enum {number}
 */
proto.api.MatchPhase = {
  AUCTION: 0,
  GAME: 1,
  FINISHED: 2
};

/**
 * @enum {number}
 */
proto.api.Suit = {
  DIAMONDS: 0,
  HEARTS: 1,
  SPADES: 2,
  CLUBS: 3
};

/**
 * @enum {number}
 */
proto.api.Rank = {
  NINE: 0,
  JACK: 1,
  QUEEN: 2,
  KING: 3,
  TEN: 4,
  ACE: 5
};

/**
 * @enum {number}
 */
proto.api.Party = {
  RE: 0,
  CONTRA: 1
};

/**
 * @enum {number}
 */
proto.api.BidType = {
  RE_BID: 0,
  CONTRA_BID: 1,
  RE_NO_NINETY: 2,
  RE_NO_SIXTY: 3,
  RE_NO_THIRTY: 4,
  RE_SCHWARZ: 5,
  CONTRA_NO_NINETY: 6,
  CONTRA_NO_SIXTY: 7,
  CONTRA_NO_THIRTY: 8,
  CONTRA_SCHWARZ: 9
};

/**
 * @enum {number}
 */
proto.api.GameType = {
  NORMAL_GAME: 0,
  MARRIAGE: 1,
  DIAMONDS_SOLO: 2,
  HEARTS_SOLO: 3,
  SPADES_SOLO: 4,
  CLUBS_SOLO: 5,
  MEATLESS_SOLO: 6
};

goog.object.extend(exports, proto.api);
