// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: karlchen.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuctionPhase int32

const (
	AuctionPhase_DECLARATION   AuctionPhase = 0
	AuctionPhase_SPECIFICATION AuctionPhase = 1
)

// Enum value maps for AuctionPhase.
var (
	AuctionPhase_name = map[int32]string{
		0: "DECLARATION",
		1: "SPECIFICATION",
	}
	AuctionPhase_value = map[string]int32{
		"DECLARATION":   0,
		"SPECIFICATION": 1,
	}
)

func (x AuctionPhase) Enum() *AuctionPhase {
	p := new(AuctionPhase)
	*p = x
	return p
}

func (x AuctionPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[0].Descriptor()
}

func (AuctionPhase) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[0]
}

func (x AuctionPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuctionPhase.Descriptor instead.
func (AuctionPhase) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{0}
}

type MatchPhase int32

const (
	MatchPhase_AUCTION  MatchPhase = 0
	MatchPhase_GAME     MatchPhase = 1
	MatchPhase_FINISHED MatchPhase = 2
)

// Enum value maps for MatchPhase.
var (
	MatchPhase_name = map[int32]string{
		0: "AUCTION",
		1: "GAME",
		2: "FINISHED",
	}
	MatchPhase_value = map[string]int32{
		"AUCTION":  0,
		"GAME":     1,
		"FINISHED": 2,
	}
)

func (x MatchPhase) Enum() *MatchPhase {
	p := new(MatchPhase)
	*p = x
	return p
}

func (x MatchPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[1].Descriptor()
}

func (MatchPhase) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[1]
}

func (x MatchPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchPhase.Descriptor instead.
func (MatchPhase) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{1}
}

type Suit int32

const (
	Suit_DIAMONDS Suit = 0
	Suit_HEARTS   Suit = 1
	Suit_SPADES   Suit = 2
	Suit_CLUBS    Suit = 3
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0: "DIAMONDS",
		1: "HEARTS",
		2: "SPADES",
		3: "CLUBS",
	}
	Suit_value = map[string]int32{
		"DIAMONDS": 0,
		"HEARTS":   1,
		"SPADES":   2,
		"CLUBS":    3,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[2].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[2]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{2}
}

type Rank int32

const (
	Rank_NINE  Rank = 0
	Rank_JACK  Rank = 1
	Rank_QUEEN Rank = 2
	Rank_KING  Rank = 3
	Rank_TEN   Rank = 4
	Rank_ACE   Rank = 5
)

// Enum value maps for Rank.
var (
	Rank_name = map[int32]string{
		0: "NINE",
		1: "JACK",
		2: "QUEEN",
		3: "KING",
		4: "TEN",
		5: "ACE",
	}
	Rank_value = map[string]int32{
		"NINE":  0,
		"JACK":  1,
		"QUEEN": 2,
		"KING":  3,
		"TEN":   4,
		"ACE":   5,
	}
)

func (x Rank) Enum() *Rank {
	p := new(Rank)
	*p = x
	return p
}

func (x Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[3].Descriptor()
}

func (Rank) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[3]
}

func (x Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rank.Descriptor instead.
func (Rank) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{3}
}

type Player int32

const (
	Player_PLAYER_1 Player = 0
	Player_PLAYER_2 Player = 1
	Player_PLAYER_3 Player = 2
	Player_PLAYER_4 Player = 3
)

// Enum value maps for Player.
var (
	Player_name = map[int32]string{
		0: "PLAYER_1",
		1: "PLAYER_2",
		2: "PLAYER_3",
		3: "PLAYER_4",
	}
	Player_value = map[string]int32{
		"PLAYER_1": 0,
		"PLAYER_2": 1,
		"PLAYER_3": 2,
		"PLAYER_4": 3,
	}
)

func (x Player) Enum() *Player {
	p := new(Player)
	*p = x
	return p
}

func (x Player) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Player) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[4].Descriptor()
}

func (Player) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[4]
}

func (x Player) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Player.Descriptor instead.
func (Player) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{4}
}

type Party int32

const (
	Party_RE     Party = 0
	Party_CONTRA Party = 1
)

// Enum value maps for Party.
var (
	Party_name = map[int32]string{
		0: "RE",
		1: "CONTRA",
	}
	Party_value = map[string]int32{
		"RE":     0,
		"CONTRA": 1,
	}
)

func (x Party) Enum() *Party {
	p := new(Party)
	*p = x
	return p
}

func (x Party) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[5].Descriptor()
}

func (Party) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[5]
}

func (x Party) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party.Descriptor instead.
func (Party) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{5}
}

type BidType int32

const (
	BidType_RE_BID           BidType = 0
	BidType_CONTRA_BID       BidType = 1
	BidType_RE_NO_NINETY     BidType = 2
	BidType_RE_NO_SIXTY      BidType = 3
	BidType_RE_NO_THIRTY     BidType = 4
	BidType_RE_SCHWARZ       BidType = 5
	BidType_CONTRA_NO_NINETY BidType = 6
	BidType_CONTRA_NO_SIXTY  BidType = 7
	BidType_CONTRA_NO_THIRTY BidType = 8
	BidType_CONTRA_SCHWARZ   BidType = 9
)

// Enum value maps for BidType.
var (
	BidType_name = map[int32]string{
		0: "RE_BID",
		1: "CONTRA_BID",
		2: "RE_NO_NINETY",
		3: "RE_NO_SIXTY",
		4: "RE_NO_THIRTY",
		5: "RE_SCHWARZ",
		6: "CONTRA_NO_NINETY",
		7: "CONTRA_NO_SIXTY",
		8: "CONTRA_NO_THIRTY",
		9: "CONTRA_SCHWARZ",
	}
	BidType_value = map[string]int32{
		"RE_BID":           0,
		"CONTRA_BID":       1,
		"RE_NO_NINETY":     2,
		"RE_NO_SIXTY":      3,
		"RE_NO_THIRTY":     4,
		"RE_SCHWARZ":       5,
		"CONTRA_NO_NINETY": 6,
		"CONTRA_NO_SIXTY":  7,
		"CONTRA_NO_THIRTY": 8,
		"CONTRA_SCHWARZ":   9,
	}
)

func (x BidType) Enum() *BidType {
	p := new(BidType)
	*p = x
	return p
}

func (x BidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidType) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[6].Descriptor()
}

func (BidType) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[6]
}

func (x BidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BidType.Descriptor instead.
func (BidType) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{6}
}

type GameType int32

const (
	GameType_NORMAL_GAME     GameType = 0
	GameType_MARRIAGE        GameType = 1
	GameType_VOLUNTARY_SOLO  GameType = 2
	GameType_COMPULSORY_SOLO GameType = 3
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "NORMAL_GAME",
		1: "MARRIAGE",
		2: "VOLUNTARY_SOLO",
		3: "COMPULSORY_SOLO",
	}
	GameType_value = map[string]int32{
		"NORMAL_GAME":     0,
		"MARRIAGE":        1,
		"VOLUNTARY_SOLO":  2,
		"COMPULSORY_SOLO": 3,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[7].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[7]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{7}
}

type SoloType int32

const (
	SoloType_DIAMONDS_SOLO SoloType = 0
	SoloType_HEARTS_SOLO   SoloType = 1
	SoloType_SPADES_SOLO   SoloType = 2
	SoloType_CLUBS_SOLO    SoloType = 3
	SoloType_MEATLESS_SOLO SoloType = 4
)

// Enum value maps for SoloType.
var (
	SoloType_name = map[int32]string{
		0: "DIAMONDS_SOLO",
		1: "HEARTS_SOLO",
		2: "SPADES_SOLO",
		3: "CLUBS_SOLO",
		4: "MEATLESS_SOLO",
	}
	SoloType_value = map[string]int32{
		"DIAMONDS_SOLO": 0,
		"HEARTS_SOLO":   1,
		"SPADES_SOLO":   2,
		"CLUBS_SOLO":    3,
		"MEATLESS_SOLO": 4,
	}
)

func (x SoloType) Enum() *SoloType {
	p := new(SoloType)
	*p = x
	return p
}

func (x SoloType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoloType) Descriptor() protoreflect.EnumDescriptor {
	return file_karlchen_proto_enumTypes[8].Descriptor()
}

func (SoloType) Type() protoreflect.EnumType {
	return &file_karlchen_proto_enumTypes[8]
}

func (x SoloType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoloType.Descriptor instead.
func (SoloType) EnumDescriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{8}
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suit Suit `protobuf:"varint,1,opt,name=suit,proto3,enum=api.Suit" json:"suit,omitempty"`
	Rank Rank `protobuf:"varint,2,opt,name=rank,proto3,enum=api.Rank" json:"rank,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetSuit() Suit {
	if x != nil {
		return x.Suit
	}
	return Suit_DIAMONDS
}

func (x *Card) GetRank() Rank {
	if x != nil {
		return x.Rank
	}
	return Rank_NINE
}

type Declaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player    Player `protobuf:"varint,1,opt,name=player,proto3,enum=api.Player" json:"player,omitempty"`
	Vorbehalt bool   `protobuf:"varint,2,opt,name=vorbehalt,proto3" json:"vorbehalt,omitempty"`
}

func (x *Declaration) Reset() {
	*x = Declaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Declaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Declaration) ProtoMessage() {}

func (x *Declaration) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Declaration.ProtoReflect.Descriptor instead.
func (*Declaration) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{1}
}

func (x *Declaration) GetPlayer() Player {
	if x != nil {
		return x.Player
	}
	return Player_PLAYER_1
}

func (x *Declaration) GetVorbehalt() bool {
	if x != nil {
		return x.Vorbehalt
	}
	return false
}

type PlayedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player Player `protobuf:"varint,1,opt,name=player,proto3,enum=api.Player" json:"player,omitempty"`
	Card   *Card  `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PlayedCard) Reset() {
	*x = PlayedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedCard) ProtoMessage() {}

func (x *PlayedCard) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedCard.ProtoReflect.Descriptor instead.
func (*PlayedCard) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{2}
}

func (x *PlayedCard) GetPlayer() Player {
	if x != nil {
		return x.Player
	}
	return Player_PLAYER_1
}

func (x *PlayedCard) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Bid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player Player  `protobuf:"varint,1,opt,name=player,proto3,enum=api.Player" json:"player,omitempty"`
	Bid    BidType `protobuf:"varint,3,opt,name=bid,proto3,enum=api.BidType" json:"bid,omitempty"`
}

func (x *Bid) Reset() {
	*x = Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bid) ProtoMessage() {}

func (x *Bid) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bid.ProtoReflect.Descriptor instead.
func (*Bid) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{3}
}

func (x *Bid) GetPlayer() Player {
	if x != nil {
		return x.Player
	}
	return Player_PLAYER_1
}

func (x *Bid) GetBid() BidType {
	if x != nil {
		return x.Bid
	}
	return BidType_RE_BID
}

type EndOfGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winner Party `protobuf:"varint,1,opt,name=winner,proto3,enum=api.Party" json:"winner,omitempty"`
	Value  int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EndOfGame) Reset() {
	*x = EndOfGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfGame) ProtoMessage() {}

func (x *EndOfGame) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfGame.ProtoReflect.Descriptor instead.
func (*EndOfGame) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{4}
}

func (x *EndOfGame) GetWinner() Party {
	if x != nil {
		return x.Winner
	}
	return Party_RE
}

func (x *EndOfGame) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*MatchEvent_Declared
	//	*MatchEvent_PlayedCard
	//	*MatchEvent_PlacedBid
	//	*MatchEvent_Ended
	Event    isMatchEvent_Event `protobuf_oneof:"event"`
	NewState *MatchState        `protobuf:"bytes,10,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
	SerialNo int32              `protobuf:"varint,11,opt,name=serial_no,json=serialNo,proto3" json:"serial_no,omitempty"`
}

func (x *MatchEvent) Reset() {
	*x = MatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEvent) ProtoMessage() {}

func (x *MatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEvent.ProtoReflect.Descriptor instead.
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{5}
}

func (m *MatchEvent) GetEvent() isMatchEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *MatchEvent) GetDeclared() *Declaration {
	if x, ok := x.GetEvent().(*MatchEvent_Declared); ok {
		return x.Declared
	}
	return nil
}

func (x *MatchEvent) GetPlayedCard() *PlayedCard {
	if x, ok := x.GetEvent().(*MatchEvent_PlayedCard); ok {
		return x.PlayedCard
	}
	return nil
}

func (x *MatchEvent) GetPlacedBid() *Bid {
	if x, ok := x.GetEvent().(*MatchEvent_PlacedBid); ok {
		return x.PlacedBid
	}
	return nil
}

func (x *MatchEvent) GetEnded() *EndOfGame {
	if x, ok := x.GetEvent().(*MatchEvent_Ended); ok {
		return x.Ended
	}
	return nil
}

func (x *MatchEvent) GetNewState() *MatchState {
	if x != nil {
		return x.NewState
	}
	return nil
}

func (x *MatchEvent) GetSerialNo() int32 {
	if x != nil {
		return x.SerialNo
	}
	return 0
}

type isMatchEvent_Event interface {
	isMatchEvent_Event()
}

type MatchEvent_Declared struct {
	Declared *Declaration `protobuf:"bytes,1,opt,name=declared,proto3,oneof"`
}

type MatchEvent_PlayedCard struct {
	PlayedCard *PlayedCard `protobuf:"bytes,3,opt,name=played_card,json=playedCard,proto3,oneof"`
}

type MatchEvent_PlacedBid struct {
	PlacedBid *Bid `protobuf:"bytes,4,opt,name=placed_bid,json=placedBid,proto3,oneof"`
}

type MatchEvent_Ended struct {
	Ended *EndOfGame `protobuf:"bytes,5,opt,name=ended,proto3,oneof"`
}

func (*MatchEvent_Declared) isMatchEvent_Event() {}

func (*MatchEvent_PlayedCard) isMatchEvent_Event() {}

func (*MatchEvent_PlacedBid) isMatchEvent_Event() {}

func (*MatchEvent_Ended) isMatchEvent_Event() {}

type PlayerParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player Player `protobuf:"varint,1,opt,name=player,proto3,enum=api.Player" json:"player,omitempty"`
	Party  Party  `protobuf:"varint,2,opt,name=party,proto3,enum=api.Party" json:"party,omitempty"`
}

func (x *PlayerParty) Reset() {
	*x = PlayerParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerParty) ProtoMessage() {}

func (x *PlayerParty) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerParty.ProtoReflect.Descriptor instead.
func (*PlayerParty) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerParty) GetPlayer() Player {
	if x != nil {
		return x.Player
	}
	return Player_PLAYER_1
}

func (x *PlayerParty) GetParty() Party {
	if x != nil {
		return x.Party
	}
	return Party_RE
}

type AuctionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase        AuctionPhase   `protobuf:"varint,1,opt,name=phase,proto3,enum=api.AuctionPhase" json:"phase,omitempty"`
	Declarations []*Declaration `protobuf:"bytes,2,rep,name=declarations,proto3" json:"declarations,omitempty"`
}

func (x *AuctionState) Reset() {
	*x = AuctionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionState) ProtoMessage() {}

func (x *AuctionState) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionState.ProtoReflect.Descriptor instead.
func (*AuctionState) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{7}
}

func (x *AuctionState) GetPhase() AuctionPhase {
	if x != nil {
		return x.Phase
	}
	return AuctionPhase_DECLARATION
}

func (x *AuctionState) GetDeclarations() []*Declaration {
	if x != nil {
		return x.Declarations
	}
	return nil
}

type SoloInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Soloist  Player   `protobuf:"varint,1,opt,name=soloist,proto3,enum=api.Player" json:"soloist,omitempty"`
	SoloType SoloType `protobuf:"varint,2,opt,name=solo_type,json=soloType,proto3,enum=api.SoloType" json:"solo_type,omitempty"`
}

func (x *SoloInfo) Reset() {
	*x = SoloInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoloInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoloInfo) ProtoMessage() {}

func (x *SoloInfo) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoloInfo.ProtoReflect.Descriptor instead.
func (*SoloInfo) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{8}
}

func (x *SoloInfo) GetSoloist() Player {
	if x != nil {
		return x.Soloist
	}
	return Player_PLAYER_1
}

func (x *SoloInfo) GetSoloType() SoloType {
	if x != nil {
		return x.SoloType
	}
	return SoloType_DIAMONDS_SOLO
}

type Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     GameType  `protobuf:"varint,1,opt,name=type,proto3,enum=api.GameType" json:"type,omitempty"`
	SoloInfo *SoloInfo `protobuf:"bytes,2,opt,name=solo_info,json=soloInfo,proto3" json:"solo_info,omitempty"`
}

func (x *Mode) Reset() {
	*x = Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mode) ProtoMessage() {}

func (x *Mode) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mode.ProtoReflect.Descriptor instead.
func (*Mode) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{9}
}

func (x *Mode) GetType() GameType {
	if x != nil {
		return x.Type
	}
	return GameType_NORMAL_GAME
}

func (x *Mode) GetSoloInfo() *SoloInfo {
	if x != nil {
		return x.SoloInfo
	}
	return nil
}

type Trick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardPlayer_1 *Card  `protobuf:"bytes,1,opt,name=card_player_1,json=cardPlayer1,proto3" json:"card_player_1,omitempty"`
	CardPlayer_2 *Card  `protobuf:"bytes,2,opt,name=card_player_2,json=cardPlayer2,proto3" json:"card_player_2,omitempty"`
	CardPlayer_3 *Card  `protobuf:"bytes,3,opt,name=card_player_3,json=cardPlayer3,proto3" json:"card_player_3,omitempty"`
	CardPlayer_4 *Card  `protobuf:"bytes,4,opt,name=card_player_4,json=cardPlayer4,proto3" json:"card_player_4,omitempty"`
	Forehand     Player `protobuf:"varint,5,opt,name=forehand,proto3,enum=api.Player" json:"forehand,omitempty"`
	Winner       Player `protobuf:"varint,6,opt,name=winner,proto3,enum=api.Player" json:"winner,omitempty"`
}

func (x *Trick) Reset() {
	*x = Trick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trick) ProtoMessage() {}

func (x *Trick) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trick.ProtoReflect.Descriptor instead.
func (*Trick) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{10}
}

func (x *Trick) GetCardPlayer_1() *Card {
	if x != nil {
		return x.CardPlayer_1
	}
	return nil
}

func (x *Trick) GetCardPlayer_2() *Card {
	if x != nil {
		return x.CardPlayer_2
	}
	return nil
}

func (x *Trick) GetCardPlayer_3() *Card {
	if x != nil {
		return x.CardPlayer_3
	}
	return nil
}

func (x *Trick) GetCardPlayer_4() *Card {
	if x != nil {
		return x.CardPlayer_4
	}
	return nil
}

func (x *Trick) GetForehand() Player {
	if x != nil {
		return x.Forehand
	}
	return Player_PLAYER_1
}

func (x *Trick) GetWinner() Player {
	if x != nil {
		return x.Winner
	}
	return Player_PLAYER_1
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bids            []*Bid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	CompletedTricks int32  `protobuf:"varint,2,opt,name=CompletedTricks,proto3" json:"CompletedTricks,omitempty"`
	CurrentTrick    *Trick `protobuf:"bytes,3,opt,name=current_trick,json=currentTrick,proto3" json:"current_trick,omitempty"`
	PreviousTrick   *Trick `protobuf:"bytes,4,opt,name=previous_trick,json=previousTrick,proto3" json:"previous_trick,omitempty"`
	Mode            *Mode  `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{11}
}

func (x *GameState) GetBids() []*Bid {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *GameState) GetCompletedTricks() int32 {
	if x != nil {
		return x.CompletedTricks
	}
	return 0
}

func (x *GameState) GetCurrentTrick() *Trick {
	if x != nil {
		return x.CurrentTrick
	}
	return nil
}

func (x *GameState) GetPreviousTrick() *Trick {
	if x != nil {
		return x.PreviousTrick
	}
	return nil
}

func (x *GameState) GetMode() *Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type MatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase   MatchPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=api.MatchPhase" json:"phase,omitempty"`
	Turn    Player     `protobuf:"varint,2,opt,name=turn,proto3,enum=api.Player" json:"turn,omitempty"`
	Players *Players   `protobuf:"bytes,3,opt,name=players,proto3" json:"players,omitempty"`
	// Types that are assignable to Details:
	//	*MatchState_AuctionState
	//	*MatchState_GameState
	Details isMatchState_Details `protobuf_oneof:"details"`
}

func (x *MatchState) Reset() {
	*x = MatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchState) ProtoMessage() {}

func (x *MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchState.ProtoReflect.Descriptor instead.
func (*MatchState) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{12}
}

func (x *MatchState) GetPhase() MatchPhase {
	if x != nil {
		return x.Phase
	}
	return MatchPhase_AUCTION
}

func (x *MatchState) GetTurn() Player {
	if x != nil {
		return x.Turn
	}
	return Player_PLAYER_1
}

func (x *MatchState) GetPlayers() *Players {
	if x != nil {
		return x.Players
	}
	return nil
}

func (m *MatchState) GetDetails() isMatchState_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *MatchState) GetAuctionState() *AuctionState {
	if x, ok := x.GetDetails().(*MatchState_AuctionState); ok {
		return x.AuctionState
	}
	return nil
}

func (x *MatchState) GetGameState() *GameState {
	if x, ok := x.GetDetails().(*MatchState_GameState); ok {
		return x.GameState
	}
	return nil
}

type isMatchState_Details interface {
	isMatchState_Details()
}

type MatchState_AuctionState struct {
	AuctionState *AuctionState `protobuf:"bytes,4,opt,name=auction_state,json=auctionState,proto3,oneof"`
}

type MatchState_GameState struct {
	GameState *GameState `protobuf:"bytes,5,opt,name=game_state,json=gameState,proto3,oneof"`
}

func (*MatchState_AuctionState) isMatchState_Details() {}

func (*MatchState_GameState) isMatchState_Details() {}

type Players struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player_1 string `protobuf:"bytes,1,opt,name=player_1,json=player1,proto3" json:"player_1,omitempty"`
	Player_2 string `protobuf:"bytes,2,opt,name=player_2,json=player2,proto3" json:"player_2,omitempty"`
	Player_3 string `protobuf:"bytes,3,opt,name=player_3,json=player3,proto3" json:"player_3,omitempty"`
	Player_4 string `protobuf:"bytes,4,opt,name=player_4,json=player4,proto3" json:"player_4,omitempty"`
}

func (x *Players) Reset() {
	*x = Players{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Players) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Players) ProtoMessage() {}

func (x *Players) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Players.ProtoReflect.Descriptor instead.
func (*Players) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{13}
}

func (x *Players) GetPlayer_1() string {
	if x != nil {
		return x.Player_1
	}
	return ""
}

func (x *Players) GetPlayer_2() string {
	if x != nil {
		return x.Player_2
	}
	return ""
}

func (x *Players) GetPlayer_3() string {
	if x != nil {
		return x.Player_3
	}
	return ""
}

func (x *Players) GetPlayer_4() string {
	if x != nil {
		return x.Player_4
	}
	return ""
}

type MyMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchState *MatchState `protobuf:"bytes,1,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
	// Types that are assignable to Role:
	//	*MyMatchState_PlayerState
	//	*MyMatchState_Spectator
	Role isMyMatchState_Role `protobuf_oneof:"role"`
}

func (x *MyMatchState) Reset() {
	*x = MyMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMatchState) ProtoMessage() {}

func (x *MyMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMatchState.ProtoReflect.Descriptor instead.
func (*MyMatchState) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{14}
}

func (x *MyMatchState) GetMatchState() *MatchState {
	if x != nil {
		return x.MatchState
	}
	return nil
}

func (m *MyMatchState) GetRole() isMyMatchState_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *MyMatchState) GetPlayerState() *PlayerPrivateState {
	if x, ok := x.GetRole().(*MyMatchState_PlayerState); ok {
		return x.PlayerState
	}
	return nil
}

func (x *MyMatchState) GetSpectator() *Empty {
	if x, ok := x.GetRole().(*MyMatchState_Spectator); ok {
		return x.Spectator
	}
	return nil
}

type isMyMatchState_Role interface {
	isMyMatchState_Role()
}

type MyMatchState_PlayerState struct {
	PlayerState *PlayerPrivateState `protobuf:"bytes,2,opt,name=player_state,json=playerState,proto3,oneof"`
}

type MyMatchState_Spectator struct {
	Spectator *Empty `protobuf:"bytes,3,opt,name=spectator,proto3,oneof"`
}

func (*MyMatchState_PlayerState) isMyMatchState_Role() {}

func (*MyMatchState_Spectator) isMyMatchState_Role() {}

type PlayerPrivateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards []*Card `protobuf:"bytes,1,rep,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`
}

func (x *PlayerPrivateState) Reset() {
	*x = PlayerPrivateState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPrivateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPrivateState) ProtoMessage() {}

func (x *PlayerPrivateState) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPrivateState.ProtoReflect.Descriptor instead.
func (*PlayerPrivateState) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerPrivateState) GetHandCards() []*Card {
	if x != nil {
		return x.HandCards
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{16}
}

type OkOrNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OkOrNot) Reset() {
	*x = OkOrNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OkOrNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OkOrNot) ProtoMessage() {}

func (x *OkOrNot) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OkOrNot.ProtoReflect.Descriptor instead.
func (*OkOrNot) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{17}
}

func (x *OkOrNot) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterReply) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type TableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TableId) Reset() {
	*x = TableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableId) ProtoMessage() {}

func (x *TableId) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableId.ProtoReflect.Descriptor instead.
func (*TableId) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{20}
}

func (x *TableId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Owner      string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	InviteCode string `protobuf:"bytes,3,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{21}
}

func (x *TableData) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TableData) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TableData) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

type TableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableData `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *TableList) Reset() {
	*x = TableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableList) ProtoMessage() {}

func (x *TableList) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableList.ProtoReflect.Descriptor instead.
func (*TableList) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{22}
}

func (x *TableList) GetTables() []*TableData {
	if x != nil {
		return x.Tables
	}
	return nil
}

type JoinTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	InviteCode string `protobuf:"bytes,2,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
}

func (x *JoinTableRequest) Reset() {
	*x = JoinTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_karlchen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTableRequest) ProtoMessage() {}

func (x *JoinTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_karlchen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTableRequest.ProtoReflect.Descriptor instead.
func (*JoinTableRequest) Descriptor() ([]byte, []int) {
	return file_karlchen_proto_rawDescGZIP(), []int{23}
}

func (x *JoinTableRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *JoinTableRequest) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

var File_karlchen_proto protoreflect.FileDescriptor

var file_karlchen_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6b, 0x61, 0x72, 0x6c, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x44, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x52, 0x04, 0x73, 0x75, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x50, 0x0a, 0x0b, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x72, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x76, 0x6f, 0x72, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x74, 0x22, 0x50, 0x0a,
	0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22,
	0x4a, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x09, 0x45,
	0x6e, 0x64, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f,
	0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x69, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x42, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x22, 0x6d, 0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x5d, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x07, 0x73, 0x6f, 0x6c, 0x6f, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x73, 0x6f, 0x6c,
	0x6f, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f,
	0x6c, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x55, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x73,
	0x6f, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73,
	0x6f, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x69, 0x63,
	0x6b, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31,
	0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x12,
	0x2d, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x33,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x33, 0x12, 0x2d,
	0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x12, 0x27, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x08, 0x66, 0x6f,
	0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x09,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x62, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x72, 0x69, 0x63, 0x6b, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74,
	0x72, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x54, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x75,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x75, 0x0a, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34,
	0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x4d, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f,
	0x0a, 0x07, 0x4f, 0x6b, 0x4f, 0x72, 0x4e, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x25, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0x1f, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5d, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x33, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2a, 0x32, 0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x04, 0x53,
	0x75, 0x69, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x50, 0x41, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x55,
	0x42, 0x53, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x43, 0x45, 0x10, 0x05, 0x2a, 0x40, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x03, 0x2a, 0x1b, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x10, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x54, 0x59, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x58, 0x54, 0x59, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x54,
	0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x57, 0x41, 0x52,
	0x5a, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f,
	0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x54, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x58, 0x54, 0x59, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x48, 0x49, 0x52,
	0x54, 0x59, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x53,
	0x43, 0x48, 0x57, 0x41, 0x52, 0x5a, 0x10, 0x09, 0x2a, 0x52, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59,
	0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x4c, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x03, 0x2a, 0x62, 0x0a, 0x08,
	0x53, 0x6f, 0x6c, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x41, 0x4d,
	0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48,
	0x45, 0x41, 0x52, 0x54, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x50, 0x41, 0x44, 0x45, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x45, 0x41, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x04,
	0x32, 0x95, 0x03, 0x0a, 0x0d, 0x4b, 0x61, 0x72, 0x6c, 0x63, 0x68, 0x65, 0x6e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x6b, 0x4f, 0x72, 0x4e,
	0x6f, 0x74, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x28, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_karlchen_proto_rawDescOnce sync.Once
	file_karlchen_proto_rawDescData = file_karlchen_proto_rawDesc
)

func file_karlchen_proto_rawDescGZIP() []byte {
	file_karlchen_proto_rawDescOnce.Do(func() {
		file_karlchen_proto_rawDescData = protoimpl.X.CompressGZIP(file_karlchen_proto_rawDescData)
	})
	return file_karlchen_proto_rawDescData
}

var file_karlchen_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_karlchen_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_karlchen_proto_goTypes = []interface{}{
	(AuctionPhase)(0),          // 0: api.AuctionPhase
	(MatchPhase)(0),            // 1: api.MatchPhase
	(Suit)(0),                  // 2: api.Suit
	(Rank)(0),                  // 3: api.Rank
	(Player)(0),                // 4: api.Player
	(Party)(0),                 // 5: api.Party
	(BidType)(0),               // 6: api.BidType
	(GameType)(0),              // 7: api.GameType
	(SoloType)(0),              // 8: api.SoloType
	(*Card)(nil),               // 9: api.Card
	(*Declaration)(nil),        // 10: api.Declaration
	(*PlayedCard)(nil),         // 11: api.PlayedCard
	(*Bid)(nil),                // 12: api.Bid
	(*EndOfGame)(nil),          // 13: api.EndOfGame
	(*MatchEvent)(nil),         // 14: api.MatchEvent
	(*PlayerParty)(nil),        // 15: api.PlayerParty
	(*AuctionState)(nil),       // 16: api.AuctionState
	(*SoloInfo)(nil),           // 17: api.SoloInfo
	(*Mode)(nil),               // 18: api.Mode
	(*Trick)(nil),              // 19: api.Trick
	(*GameState)(nil),          // 20: api.GameState
	(*MatchState)(nil),         // 21: api.MatchState
	(*Players)(nil),            // 22: api.Players
	(*MyMatchState)(nil),       // 23: api.MyMatchState
	(*PlayerPrivateState)(nil), // 24: api.PlayerPrivateState
	(*Empty)(nil),              // 25: api.Empty
	(*OkOrNot)(nil),            // 26: api.OkOrNot
	(*RegisterRequest)(nil),    // 27: api.RegisterRequest
	(*RegisterReply)(nil),      // 28: api.RegisterReply
	(*TableId)(nil),            // 29: api.TableId
	(*TableData)(nil),          // 30: api.TableData
	(*TableList)(nil),          // 31: api.TableList
	(*JoinTableRequest)(nil),   // 32: api.JoinTableRequest
}
var file_karlchen_proto_depIdxs = []int32{
	2,  // 0: api.Card.suit:type_name -> api.Suit
	3,  // 1: api.Card.rank:type_name -> api.Rank
	4,  // 2: api.Declaration.player:type_name -> api.Player
	4,  // 3: api.PlayedCard.player:type_name -> api.Player
	9,  // 4: api.PlayedCard.card:type_name -> api.Card
	4,  // 5: api.Bid.player:type_name -> api.Player
	6,  // 6: api.Bid.bid:type_name -> api.BidType
	5,  // 7: api.EndOfGame.winner:type_name -> api.Party
	10, // 8: api.MatchEvent.declared:type_name -> api.Declaration
	11, // 9: api.MatchEvent.played_card:type_name -> api.PlayedCard
	12, // 10: api.MatchEvent.placed_bid:type_name -> api.Bid
	13, // 11: api.MatchEvent.ended:type_name -> api.EndOfGame
	21, // 12: api.MatchEvent.new_state:type_name -> api.MatchState
	4,  // 13: api.PlayerParty.player:type_name -> api.Player
	5,  // 14: api.PlayerParty.party:type_name -> api.Party
	0,  // 15: api.AuctionState.phase:type_name -> api.AuctionPhase
	10, // 16: api.AuctionState.declarations:type_name -> api.Declaration
	4,  // 17: api.SoloInfo.soloist:type_name -> api.Player
	8,  // 18: api.SoloInfo.solo_type:type_name -> api.SoloType
	7,  // 19: api.Mode.type:type_name -> api.GameType
	17, // 20: api.Mode.solo_info:type_name -> api.SoloInfo
	9,  // 21: api.Trick.card_player_1:type_name -> api.Card
	9,  // 22: api.Trick.card_player_2:type_name -> api.Card
	9,  // 23: api.Trick.card_player_3:type_name -> api.Card
	9,  // 24: api.Trick.card_player_4:type_name -> api.Card
	4,  // 25: api.Trick.forehand:type_name -> api.Player
	4,  // 26: api.Trick.winner:type_name -> api.Player
	12, // 27: api.GameState.bids:type_name -> api.Bid
	19, // 28: api.GameState.current_trick:type_name -> api.Trick
	19, // 29: api.GameState.previous_trick:type_name -> api.Trick
	18, // 30: api.GameState.mode:type_name -> api.Mode
	1,  // 31: api.MatchState.phase:type_name -> api.MatchPhase
	4,  // 32: api.MatchState.turn:type_name -> api.Player
	22, // 33: api.MatchState.players:type_name -> api.Players
	16, // 34: api.MatchState.auction_state:type_name -> api.AuctionState
	20, // 35: api.MatchState.game_state:type_name -> api.GameState
	21, // 36: api.MyMatchState.match_state:type_name -> api.MatchState
	24, // 37: api.MyMatchState.player_state:type_name -> api.PlayerPrivateState
	25, // 38: api.MyMatchState.spectator:type_name -> api.Empty
	9,  // 39: api.PlayerPrivateState.hand_cards:type_name -> api.Card
	30, // 40: api.TableList.tables:type_name -> api.TableData
	27, // 41: api.Karlchencloud.Register:input_type -> api.RegisterRequest
	25, // 42: api.Karlchencloud.CheckLogin:input_type -> api.Empty
	25, // 43: api.Karlchencloud.ListTables:input_type -> api.Empty
	25, // 44: api.Karlchencloud.CreateTable:input_type -> api.Empty
	29, // 45: api.Karlchencloud.StartTable:input_type -> api.TableId
	32, // 46: api.Karlchencloud.JoinTable:input_type -> api.JoinTableRequest
	29, // 47: api.Karlchencloud.SubscribeMatchEvents:input_type -> api.TableId
	29, // 48: api.Karlchencloud.GetMatchState:input_type -> api.TableId
	28, // 49: api.Karlchencloud.Register:output_type -> api.RegisterReply
	26, // 50: api.Karlchencloud.CheckLogin:output_type -> api.OkOrNot
	31, // 51: api.Karlchencloud.ListTables:output_type -> api.TableList
	30, // 52: api.Karlchencloud.CreateTable:output_type -> api.TableData
	25, // 53: api.Karlchencloud.StartTable:output_type -> api.Empty
	25, // 54: api.Karlchencloud.JoinTable:output_type -> api.Empty
	14, // 55: api.Karlchencloud.SubscribeMatchEvents:output_type -> api.MatchEvent
	23, // 56: api.Karlchencloud.GetMatchState:output_type -> api.MyMatchState
	49, // [49:57] is the sub-list for method output_type
	41, // [41:49] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_karlchen_proto_init() }
func file_karlchen_proto_init() {
	if File_karlchen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_karlchen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Declaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndOfGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoloInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Players); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPrivateState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OkOrNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_karlchen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_karlchen_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MatchEvent_Declared)(nil),
		(*MatchEvent_PlayedCard)(nil),
		(*MatchEvent_PlacedBid)(nil),
		(*MatchEvent_Ended)(nil),
	}
	file_karlchen_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MatchState_AuctionState)(nil),
		(*MatchState_GameState)(nil),
	}
	file_karlchen_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*MyMatchState_PlayerState)(nil),
		(*MyMatchState_Spectator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_karlchen_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_karlchen_proto_goTypes,
		DependencyIndexes: file_karlchen_proto_depIdxs,
		EnumInfos:         file_karlchen_proto_enumTypes,
		MessageInfos:      file_karlchen_proto_msgTypes,
	}.Build()
	File_karlchen_proto = out.File
	file_karlchen_proto_rawDesc = nil
	file_karlchen_proto_goTypes = nil
	file_karlchen_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KarlchencloudClient is the client API for Karlchencloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KarlchencloudClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	CheckLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkOrNot, error)
	ListTables(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableList, error)
	CreateTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableData, error)
	StartTable(ctx context.Context, in *TableId, opts ...grpc.CallOption) (*Empty, error)
	JoinTable(ctx context.Context, in *JoinTableRequest, opts ...grpc.CallOption) (*Empty, error)
	SubscribeMatchEvents(ctx context.Context, in *TableId, opts ...grpc.CallOption) (Karlchencloud_SubscribeMatchEventsClient, error)
	GetMatchState(ctx context.Context, in *TableId, opts ...grpc.CallOption) (*MyMatchState, error)
}

type karlchencloudClient struct {
	cc grpc.ClientConnInterface
}

func NewKarlchencloudClient(cc grpc.ClientConnInterface) KarlchencloudClient {
	return &karlchencloudClient{cc}
}

func (c *karlchencloudClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karlchencloudClient) CheckLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OkOrNot, error) {
	out := new(OkOrNot)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karlchencloudClient) ListTables(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableList, error) {
	out := new(TableList)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karlchencloudClient) CreateTable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableData, error) {
	out := new(TableData)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karlchencloudClient) StartTable(ctx context.Context, in *TableId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/StartTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karlchencloudClient) JoinTable(ctx context.Context, in *JoinTableRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/JoinTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karlchencloudClient) SubscribeMatchEvents(ctx context.Context, in *TableId, opts ...grpc.CallOption) (Karlchencloud_SubscribeMatchEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Karlchencloud_serviceDesc.Streams[0], "/api.Karlchencloud/SubscribeMatchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &karlchencloudSubscribeMatchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Karlchencloud_SubscribeMatchEventsClient interface {
	Recv() (*MatchEvent, error)
	grpc.ClientStream
}

type karlchencloudSubscribeMatchEventsClient struct {
	grpc.ClientStream
}

func (x *karlchencloudSubscribeMatchEventsClient) Recv() (*MatchEvent, error) {
	m := new(MatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *karlchencloudClient) GetMatchState(ctx context.Context, in *TableId, opts ...grpc.CallOption) (*MyMatchState, error) {
	out := new(MyMatchState)
	err := c.cc.Invoke(ctx, "/api.Karlchencloud/GetMatchState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KarlchencloudServer is the server API for Karlchencloud service.
type KarlchencloudServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	CheckLogin(context.Context, *Empty) (*OkOrNot, error)
	ListTables(context.Context, *Empty) (*TableList, error)
	CreateTable(context.Context, *Empty) (*TableData, error)
	StartTable(context.Context, *TableId) (*Empty, error)
	JoinTable(context.Context, *JoinTableRequest) (*Empty, error)
	SubscribeMatchEvents(*TableId, Karlchencloud_SubscribeMatchEventsServer) error
	GetMatchState(context.Context, *TableId) (*MyMatchState, error)
}

// UnimplementedKarlchencloudServer can be embedded to have forward compatible implementations.
type UnimplementedKarlchencloudServer struct {
}

func (*UnimplementedKarlchencloudServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedKarlchencloudServer) CheckLogin(context.Context, *Empty) (*OkOrNot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (*UnimplementedKarlchencloudServer) ListTables(context.Context, *Empty) (*TableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (*UnimplementedKarlchencloudServer) CreateTable(context.Context, *Empty) (*TableData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (*UnimplementedKarlchencloudServer) StartTable(context.Context, *TableId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTable not implemented")
}
func (*UnimplementedKarlchencloudServer) JoinTable(context.Context, *JoinTableRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTable not implemented")
}
func (*UnimplementedKarlchencloudServer) SubscribeMatchEvents(*TableId, Karlchencloud_SubscribeMatchEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMatchEvents not implemented")
}
func (*UnimplementedKarlchencloudServer) GetMatchState(context.Context, *TableId) (*MyMatchState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchState not implemented")
}

func RegisterKarlchencloudServer(s *grpc.Server, srv KarlchencloudServer) {
	s.RegisterService(&_Karlchencloud_serviceDesc, srv)
}

func _Karlchencloud_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Karlchencloud_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).CheckLogin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Karlchencloud_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).ListTables(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Karlchencloud_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).CreateTable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Karlchencloud_StartTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).StartTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/StartTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).StartTable(ctx, req.(*TableId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Karlchencloud_JoinTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).JoinTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/JoinTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).JoinTable(ctx, req.(*JoinTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Karlchencloud_SubscribeMatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TableId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KarlchencloudServer).SubscribeMatchEvents(m, &karlchencloudSubscribeMatchEventsServer{stream})
}

type Karlchencloud_SubscribeMatchEventsServer interface {
	Send(*MatchEvent) error
	grpc.ServerStream
}

type karlchencloudSubscribeMatchEventsServer struct {
	grpc.ServerStream
}

func (x *karlchencloudSubscribeMatchEventsServer) Send(m *MatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Karlchencloud_GetMatchState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarlchencloudServer).GetMatchState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Karlchencloud/GetMatchState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarlchencloudServer).GetMatchState(ctx, req.(*TableId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Karlchencloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Karlchencloud",
	HandlerType: (*KarlchencloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Karlchencloud_Register_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _Karlchencloud_CheckLogin_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _Karlchencloud_ListTables_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _Karlchencloud_CreateTable_Handler,
		},
		{
			MethodName: "StartTable",
			Handler:    _Karlchencloud_StartTable_Handler,
		},
		{
			MethodName: "JoinTable",
			Handler:    _Karlchencloud_JoinTable_Handler,
		},
		{
			MethodName: "GetMatchState",
			Handler:    _Karlchencloud_GetMatchState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMatchEvents",
			Handler:       _Karlchencloud_SubscribeMatchEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "karlchen.proto",
}
