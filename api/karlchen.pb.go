// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.16.0
// source: api/karlchen.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MemberEventType int32

const (
	MemberEventType_JOIN_TABLE  MemberEventType = 0
	MemberEventType_LEAVE_TABLE MemberEventType = 1
	MemberEventType_GO_OFFLINE  MemberEventType = 2
	MemberEventType_GO_ONLINE   MemberEventType = 3
)

// Enum value maps for MemberEventType.
var (
	MemberEventType_name = map[int32]string{
		0: "JOIN_TABLE",
		1: "LEAVE_TABLE",
		2: "GO_OFFLINE",
		3: "GO_ONLINE",
	}
	MemberEventType_value = map[string]int32{
		"JOIN_TABLE":  0,
		"LEAVE_TABLE": 1,
		"GO_OFFLINE":  2,
		"GO_ONLINE":   3,
	}
)

func (x MemberEventType) Enum() *MemberEventType {
	p := new(MemberEventType)
	*p = x
	return p
}

func (x MemberEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemberEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[0].Descriptor()
}

func (MemberEventType) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[0]
}

func (x MemberEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemberEventType.Descriptor instead.
func (MemberEventType) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{0}
}

type TablePhase int32

const (
	TablePhase_NOT_STARTED   TablePhase = 0
	TablePhase_PLAYING       TablePhase = 1
	TablePhase_BETWEEN_GAMES TablePhase = 2
	TablePhase_TABLE_ENDED   TablePhase = 3
)

// Enum value maps for TablePhase.
var (
	TablePhase_name = map[int32]string{
		0: "NOT_STARTED",
		1: "PLAYING",
		2: "BETWEEN_GAMES",
		3: "TABLE_ENDED",
	}
	TablePhase_value = map[string]int32{
		"NOT_STARTED":   0,
		"PLAYING":       1,
		"BETWEEN_GAMES": 2,
		"TABLE_ENDED":   3,
	}
)

func (x TablePhase) Enum() *TablePhase {
	p := new(TablePhase)
	*p = x
	return p
}

func (x TablePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TablePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[1].Descriptor()
}

func (TablePhase) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[1]
}

func (x TablePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TablePhase.Descriptor instead.
func (TablePhase) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{1}
}

type MatchPhase int32

const (
	MatchPhase_AUCTION  MatchPhase = 0
	MatchPhase_GAME     MatchPhase = 1
	MatchPhase_FINISHED MatchPhase = 2
)

// Enum value maps for MatchPhase.
var (
	MatchPhase_name = map[int32]string{
		0: "AUCTION",
		1: "GAME",
		2: "FINISHED",
	}
	MatchPhase_value = map[string]int32{
		"AUCTION":  0,
		"GAME":     1,
		"FINISHED": 2,
	}
)

func (x MatchPhase) Enum() *MatchPhase {
	p := new(MatchPhase)
	*p = x
	return p
}

func (x MatchPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[2].Descriptor()
}

func (MatchPhase) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[2]
}

func (x MatchPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchPhase.Descriptor instead.
func (MatchPhase) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{2}
}

type Suit int32

const (
	Suit_DIAMONDS Suit = 0
	Suit_HEARTS   Suit = 1
	Suit_SPADES   Suit = 2
	Suit_CLUBS    Suit = 3
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0: "DIAMONDS",
		1: "HEARTS",
		2: "SPADES",
		3: "CLUBS",
	}
	Suit_value = map[string]int32{
		"DIAMONDS": 0,
		"HEARTS":   1,
		"SPADES":   2,
		"CLUBS":    3,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[3].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[3]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{3}
}

type Rank int32

const (
	Rank_NINE  Rank = 0
	Rank_JACK  Rank = 1
	Rank_QUEEN Rank = 2
	Rank_KING  Rank = 3
	Rank_TEN   Rank = 4
	Rank_ACE   Rank = 5
)

// Enum value maps for Rank.
var (
	Rank_name = map[int32]string{
		0: "NINE",
		1: "JACK",
		2: "QUEEN",
		3: "KING",
		4: "TEN",
		5: "ACE",
	}
	Rank_value = map[string]int32{
		"NINE":  0,
		"JACK":  1,
		"QUEEN": 2,
		"KING":  3,
		"TEN":   4,
		"ACE":   5,
	}
)

func (x Rank) Enum() *Rank {
	p := new(Rank)
	*p = x
	return p
}

func (x Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[4].Descriptor()
}

func (Rank) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[4]
}

func (x Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rank.Descriptor instead.
func (Rank) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{4}
}

type Party int32

const (
	Party_RE     Party = 0
	Party_CONTRA Party = 1
)

// Enum value maps for Party.
var (
	Party_name = map[int32]string{
		0: "RE",
		1: "CONTRA",
	}
	Party_value = map[string]int32{
		"RE":     0,
		"CONTRA": 1,
	}
)

func (x Party) Enum() *Party {
	p := new(Party)
	*p = x
	return p
}

func (x Party) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[5].Descriptor()
}

func (Party) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[5]
}

func (x Party) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party.Descriptor instead.
func (Party) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{5}
}

type BidType int32

const (
	BidType_RE_BID           BidType = 0
	BidType_CONTRA_BID       BidType = 1
	BidType_RE_NO_NINETY     BidType = 2
	BidType_RE_NO_SIXTY      BidType = 3
	BidType_RE_NO_THIRTY     BidType = 4
	BidType_RE_SCHWARZ       BidType = 5
	BidType_CONTRA_NO_NINETY BidType = 6
	BidType_CONTRA_NO_SIXTY  BidType = 7
	BidType_CONTRA_NO_THIRTY BidType = 8
	BidType_CONTRA_SCHWARZ   BidType = 9
)

// Enum value maps for BidType.
var (
	BidType_name = map[int32]string{
		0: "RE_BID",
		1: "CONTRA_BID",
		2: "RE_NO_NINETY",
		3: "RE_NO_SIXTY",
		4: "RE_NO_THIRTY",
		5: "RE_SCHWARZ",
		6: "CONTRA_NO_NINETY",
		7: "CONTRA_NO_SIXTY",
		8: "CONTRA_NO_THIRTY",
		9: "CONTRA_SCHWARZ",
	}
	BidType_value = map[string]int32{
		"RE_BID":           0,
		"CONTRA_BID":       1,
		"RE_NO_NINETY":     2,
		"RE_NO_SIXTY":      3,
		"RE_NO_THIRTY":     4,
		"RE_SCHWARZ":       5,
		"CONTRA_NO_NINETY": 6,
		"CONTRA_NO_SIXTY":  7,
		"CONTRA_NO_THIRTY": 8,
		"CONTRA_SCHWARZ":   9,
	}
)

func (x BidType) Enum() *BidType {
	p := new(BidType)
	*p = x
	return p
}

func (x BidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[6].Descriptor()
}

func (BidType) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[6]
}

func (x BidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BidType.Descriptor instead.
func (BidType) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{6}
}

type GameType int32

const (
	GameType_NORMAL_GAME   GameType = 0
	GameType_MARRIAGE      GameType = 1
	GameType_DIAMONDS_SOLO GameType = 2
	GameType_HEARTS_SOLO   GameType = 3
	GameType_SPADES_SOLO   GameType = 4
	GameType_CLUBS_SOLO    GameType = 5
	GameType_MEATLESS_SOLO GameType = 6
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "NORMAL_GAME",
		1: "MARRIAGE",
		2: "DIAMONDS_SOLO",
		3: "HEARTS_SOLO",
		4: "SPADES_SOLO",
		5: "CLUBS_SOLO",
		6: "MEATLESS_SOLO",
	}
	GameType_value = map[string]int32{
		"NORMAL_GAME":   0,
		"MARRIAGE":      1,
		"DIAMONDS_SOLO": 2,
		"HEARTS_SOLO":   3,
		"SPADES_SOLO":   4,
		"CLUBS_SOLO":    5,
		"MEATLESS_SOLO": 6,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_karlchen_proto_enumTypes[7].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_api_karlchen_proto_enumTypes[7]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{7}
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suit Suit `protobuf:"varint,1,opt,name=suit,proto3,enum=api.Suit" json:"suit,omitempty"`
	Rank Rank `protobuf:"varint,2,opt,name=rank,proto3,enum=api.Rank" json:"rank,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetSuit() Suit {
	if x != nil {
		return x.Suit
	}
	return Suit_DIAMONDS
}

func (x *Card) GetRank() Rank {
	if x != nil {
		return x.Rank
	}
	return Rank_NINE
}

type PlayerValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PlayerValue) Reset() {
	*x = PlayerValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerValue) ProtoMessage() {}

func (x *PlayerValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerValue.ProtoReflect.Descriptor instead.
func (*PlayerValue) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerValue) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PartyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party Party `protobuf:"varint,1,opt,name=party,proto3,enum=api.Party" json:"party,omitempty"`
}

func (x *PartyValue) Reset() {
	*x = PartyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyValue) ProtoMessage() {}

func (x *PartyValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyValue.ProtoReflect.Descriptor instead.
func (*PartyValue) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{2}
}

func (x *PartyValue) GetParty() Party {
	if x != nil {
		return x.Party
	}
	return Party_RE
}

type Declaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Vorbehalt       bool   `protobuf:"varint,2,opt,name=vorbehalt,proto3" json:"vorbehalt,omitempty"`
	DefinedGameMode *Mode  `protobuf:"bytes,3,opt,name=definedGameMode,proto3" json:"definedGameMode,omitempty"`
}

func (x *Declaration) Reset() {
	*x = Declaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Declaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Declaration) ProtoMessage() {}

func (x *Declaration) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Declaration.ProtoReflect.Descriptor instead.
func (*Declaration) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{3}
}

func (x *Declaration) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Declaration) GetVorbehalt() bool {
	if x != nil {
		return x.Vorbehalt
	}
	return false
}

func (x *Declaration) GetDefinedGameMode() *Mode {
	if x != nil {
		return x.DefinedGameMode
	}
	return nil
}

type PlayedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Card        *Card        `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	TrickWinner *PlayerValue `protobuf:"bytes,3,opt,name=trick_winner,json=trickWinner,proto3" json:"trick_winner,omitempty"`
	Winner      *PartyValue  `protobuf:"bytes,4,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (x *PlayedCard) Reset() {
	*x = PlayedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedCard) ProtoMessage() {}

func (x *PlayedCard) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedCard.ProtoReflect.Descriptor instead.
func (*PlayedCard) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{4}
}

func (x *PlayedCard) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayedCard) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *PlayedCard) GetTrickWinner() *PlayerValue {
	if x != nil {
		return x.TrickWinner
	}
	return nil
}

func (x *PlayedCard) GetWinner() *PartyValue {
	if x != nil {
		return x.Winner
	}
	return nil
}

type Bid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Bid    BidType `protobuf:"varint,3,opt,name=bid,proto3,enum=api.BidType" json:"bid,omitempty"`
}

func (x *Bid) Reset() {
	*x = Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bid) ProtoMessage() {}

func (x *Bid) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bid.ProtoReflect.Descriptor instead.
func (*Bid) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{5}
}

func (x *Bid) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Bid) GetBid() BidType {
	if x != nil {
		return x.Bid
	}
	return BidType_RE_BID
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*Event_Welcome
	//	*Event_Start
	//	*Event_Declared
	//	*Event_PlayedCard
	//	*Event_PlacedBid
	//	*Event_Member
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{6}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetWelcome() *UserState {
	if x, ok := x.GetEvent().(*Event_Welcome); ok {
		return x.Welcome
	}
	return nil
}

func (x *Event) GetStart() *MatchState {
	if x, ok := x.GetEvent().(*Event_Start); ok {
		return x.Start
	}
	return nil
}

func (x *Event) GetDeclared() *Declaration {
	if x, ok := x.GetEvent().(*Event_Declared); ok {
		return x.Declared
	}
	return nil
}

func (x *Event) GetPlayedCard() *PlayedCard {
	if x, ok := x.GetEvent().(*Event_PlayedCard); ok {
		return x.PlayedCard
	}
	return nil
}

func (x *Event) GetPlacedBid() *Bid {
	if x, ok := x.GetEvent().(*Event_PlacedBid); ok {
		return x.PlacedBid
	}
	return nil
}

func (x *Event) GetMember() *MemberEvent {
	if x, ok := x.GetEvent().(*Event_Member); ok {
		return x.Member
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Welcome struct {
	Welcome *UserState `protobuf:"bytes,1,opt,name=welcome,proto3,oneof"`
}

type Event_Start struct {
	Start *MatchState `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type Event_Declared struct {
	Declared *Declaration `protobuf:"bytes,3,opt,name=declared,proto3,oneof"`
}

type Event_PlayedCard struct {
	PlayedCard *PlayedCard `protobuf:"bytes,4,opt,name=played_card,json=playedCard,proto3,oneof"`
}

type Event_PlacedBid struct {
	PlacedBid *Bid `protobuf:"bytes,5,opt,name=placed_bid,json=placedBid,proto3,oneof"`
}

type Event_Member struct {
	Member *MemberEvent `protobuf:"bytes,6,opt,name=member,proto3,oneof"`
}

func (*Event_Welcome) isEvent_Event() {}

func (*Event_Start) isEvent_Event() {}

func (*Event_Declared) isEvent_Event() {}

func (*Event_PlayedCard) isEvent_Event() {}

func (*Event_PlacedBid) isEvent_Event() {}

func (*Event_Member) isEvent_Event() {}

type UserState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTable *TableState `protobuf:"bytes,1,opt,name=currentTable,proto3" json:"currentTable,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UserState) Reset() {
	*x = UserState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserState) ProtoMessage() {}

func (x *UserState) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserState.ProtoReflect.Descriptor instead.
func (*UserState) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{7}
}

func (x *UserState) GetCurrentTable() *TableState {
	if x != nil {
		return x.CurrentTable
	}
	return nil
}

func (x *UserState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MemberEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name   string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type   MemberEventType `protobuf:"varint,3,opt,name=type,proto3,enum=api.MemberEventType" json:"type,omitempty"`
}

func (x *MemberEvent) Reset() {
	*x = MemberEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberEvent) ProtoMessage() {}

func (x *MemberEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberEvent.ProtoReflect.Descriptor instead.
func (*MemberEvent) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{8}
}

func (x *MemberEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MemberEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MemberEvent) GetType() MemberEventType {
	if x != nil {
		return x.Type
	}
	return MemberEventType_JOIN_TABLE
}

type PlayCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Card  *Card  `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PlayCardRequest) Reset() {
	*x = PlayCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCardRequest) ProtoMessage() {}

func (x *PlayCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCardRequest.ProtoReflect.Descriptor instead.
func (*PlayCardRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{9}
}

func (x *PlayCardRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *PlayCardRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type PlaceBidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string  `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Bid   BidType `protobuf:"varint,2,opt,name=bid,proto3,enum=api.BidType" json:"bid,omitempty"`
}

func (x *PlaceBidRequest) Reset() {
	*x = PlaceBidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBidRequest) ProtoMessage() {}

func (x *PlaceBidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBidRequest.ProtoReflect.Descriptor instead.
func (*PlaceBidRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{10}
}

func (x *PlaceBidRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *PlaceBidRequest) GetBid() BidType {
	if x != nil {
		return x.Bid
	}
	return BidType_RE_BID
}

type DeclareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       string   `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Declaration GameType `protobuf:"varint,2,opt,name=declaration,proto3,enum=api.GameType" json:"declaration,omitempty"`
}

func (x *DeclareRequest) Reset() {
	*x = DeclareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareRequest) ProtoMessage() {}

func (x *DeclareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareRequest.ProtoReflect.Descriptor instead.
func (*DeclareRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{11}
}

func (x *DeclareRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DeclareRequest) GetDeclaration() GameType {
	if x != nil {
		return x.Declaration
	}
	return GameType_NORMAL_GAME
}

type AuctionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Declarations []*Declaration `protobuf:"bytes,1,rep,name=declarations,proto3" json:"declarations,omitempty"`
}

func (x *AuctionState) Reset() {
	*x = AuctionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionState) ProtoMessage() {}

func (x *AuctionState) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionState.ProtoReflect.Descriptor instead.
func (*AuctionState) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{12}
}

func (x *AuctionState) GetDeclarations() []*Declaration {
	if x != nil {
		return x.Declarations
	}
	return nil
}

type Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     GameType     `protobuf:"varint,1,opt,name=type,proto3,enum=api.GameType" json:"type,omitempty"`
	Soloist  *PlayerValue `protobuf:"bytes,2,opt,name=soloist,proto3" json:"soloist,omitempty"`
	Spouse   *PlayerValue `protobuf:"bytes,3,opt,name=spouse,proto3" json:"spouse,omitempty"`
	Forehand string       `protobuf:"bytes,4,opt,name=forehand,proto3" json:"forehand,omitempty"`
}

func (x *Mode) Reset() {
	*x = Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mode) ProtoMessage() {}

func (x *Mode) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mode.ProtoReflect.Descriptor instead.
func (*Mode) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{13}
}

func (x *Mode) GetType() GameType {
	if x != nil {
		return x.Type
	}
	return GameType_NORMAL_GAME
}

func (x *Mode) GetSoloist() *PlayerValue {
	if x != nil {
		return x.Soloist
	}
	return nil
}

func (x *Mode) GetSpouse() *PlayerValue {
	if x != nil {
		return x.Spouse
	}
	return nil
}

func (x *Mode) GetForehand() string {
	if x != nil {
		return x.Forehand
	}
	return ""
}

type Trick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards          []*Card      `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	UserIdForehand string       `protobuf:"bytes,5,opt,name=user_id_forehand,json=userIdForehand,proto3" json:"user_id_forehand,omitempty"`
	UserIdWinner   *PlayerValue `protobuf:"bytes,6,opt,name=user_id_winner,json=userIdWinner,proto3" json:"user_id_winner,omitempty"`
}

func (x *Trick) Reset() {
	*x = Trick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trick) ProtoMessage() {}

func (x *Trick) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trick.ProtoReflect.Descriptor instead.
func (*Trick) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{14}
}

func (x *Trick) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Trick) GetUserIdForehand() string {
	if x != nil {
		return x.UserIdForehand
	}
	return ""
}

func (x *Trick) GetUserIdWinner() *PlayerValue {
	if x != nil {
		return x.UserIdWinner
	}
	return nil
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bids            []*Bid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
	CompletedTricks int32  `protobuf:"varint,2,opt,name=completed_tricks,json=completedTricks,proto3" json:"completed_tricks,omitempty"`
	CurrentTrick    *Trick `protobuf:"bytes,3,opt,name=current_trick,json=currentTrick,proto3" json:"current_trick,omitempty"`
	PreviousTrick   *Trick `protobuf:"bytes,4,opt,name=previous_trick,json=previousTrick,proto3" json:"previous_trick,omitempty"`
	Mode            *Mode  `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{15}
}

func (x *GameState) GetBids() []*Bid {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *GameState) GetCompletedTricks() int32 {
	if x != nil {
		return x.CompletedTricks
	}
	return 0
}

func (x *GameState) GetCurrentTrick() *Trick {
	if x != nil {
		return x.CurrentTrick
	}
	return nil
}

func (x *GameState) GetPreviousTrick() *Trick {
	if x != nil {
		return x.PreviousTrick
	}
	return nil
}

func (x *GameState) GetMode() *Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type Cards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *Cards) Reset() {
	*x = Cards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cards) ProtoMessage() {}

func (x *Cards) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cards.ProtoReflect.Descriptor instead.
func (*Cards) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{16}
}

func (x *Cards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type MatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase   MatchPhase   `protobuf:"varint,1,opt,name=phase,proto3,enum=api.MatchPhase" json:"phase,omitempty"`
	Turn    *PlayerValue `protobuf:"bytes,2,opt,name=turn,proto3" json:"turn,omitempty"`
	Players *Players     `protobuf:"bytes,3,opt,name=players,proto3" json:"players,omitempty"`
	// Types that are assignable to Role:
	//	*MatchState_Spectator
	//	*MatchState_OwnCards
	Role isMatchState_Role `protobuf_oneof:"role"`
	// Types that are assignable to Details:
	//	*MatchState_AuctionState
	//	*MatchState_GameState
	Details isMatchState_Details `protobuf_oneof:"details"`
}

func (x *MatchState) Reset() {
	*x = MatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchState) ProtoMessage() {}

func (x *MatchState) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchState.ProtoReflect.Descriptor instead.
func (*MatchState) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{17}
}

func (x *MatchState) GetPhase() MatchPhase {
	if x != nil {
		return x.Phase
	}
	return MatchPhase_AUCTION
}

func (x *MatchState) GetTurn() *PlayerValue {
	if x != nil {
		return x.Turn
	}
	return nil
}

func (x *MatchState) GetPlayers() *Players {
	if x != nil {
		return x.Players
	}
	return nil
}

func (m *MatchState) GetRole() isMatchState_Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (x *MatchState) GetSpectator() *Empty {
	if x, ok := x.GetRole().(*MatchState_Spectator); ok {
		return x.Spectator
	}
	return nil
}

func (x *MatchState) GetOwnCards() *Cards {
	if x, ok := x.GetRole().(*MatchState_OwnCards); ok {
		return x.OwnCards
	}
	return nil
}

func (m *MatchState) GetDetails() isMatchState_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *MatchState) GetAuctionState() *AuctionState {
	if x, ok := x.GetDetails().(*MatchState_AuctionState); ok {
		return x.AuctionState
	}
	return nil
}

func (x *MatchState) GetGameState() *GameState {
	if x, ok := x.GetDetails().(*MatchState_GameState); ok {
		return x.GameState
	}
	return nil
}

type isMatchState_Role interface {
	isMatchState_Role()
}

type MatchState_Spectator struct {
	Spectator *Empty `protobuf:"bytes,4,opt,name=spectator,proto3,oneof"`
}

type MatchState_OwnCards struct {
	OwnCards *Cards `protobuf:"bytes,5,opt,name=own_cards,json=ownCards,proto3,oneof"`
}

func (*MatchState_Spectator) isMatchState_Role() {}

func (*MatchState_OwnCards) isMatchState_Role() {}

type isMatchState_Details interface {
	isMatchState_Details()
}

type MatchState_AuctionState struct {
	AuctionState *AuctionState `protobuf:"bytes,6,opt,name=auction_state,json=auctionState,proto3,oneof"`
}

type MatchState_GameState struct {
	GameState *GameState `protobuf:"bytes,7,opt,name=game_state,json=gameState,proto3,oneof"`
}

func (*MatchState_AuctionState) isMatchState_Details() {}

func (*MatchState_GameState) isMatchState_Details() {}

type Players struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdSelf  string `protobuf:"bytes,1,opt,name=user_id_self,json=userIdSelf,proto3" json:"user_id_self,omitempty"`
	UserIdLeft  string `protobuf:"bytes,2,opt,name=user_id_left,json=userIdLeft,proto3" json:"user_id_left,omitempty"`
	UserIdFace  string `protobuf:"bytes,3,opt,name=user_id_face,json=userIdFace,proto3" json:"user_id_face,omitempty"`
	UserIdRight string `protobuf:"bytes,4,opt,name=user_id_right,json=userIdRight,proto3" json:"user_id_right,omitempty"`
}

func (x *Players) Reset() {
	*x = Players{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Players) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Players) ProtoMessage() {}

func (x *Players) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Players.ProtoReflect.Descriptor instead.
func (*Players) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{18}
}

func (x *Players) GetUserIdSelf() string {
	if x != nil {
		return x.UserIdSelf
	}
	return ""
}

func (x *Players) GetUserIdLeft() string {
	if x != nil {
		return x.UserIdLeft
	}
	return ""
}

func (x *Players) GetUserIdFace() string {
	if x != nil {
		return x.UserIdFace
	}
	return ""
}

func (x *Players) GetUserIdRight() string {
	if x != nil {
		return x.UserIdRight
	}
	return ""
}

type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    string         `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Owner      string         `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	InviteCode string         `protobuf:"bytes,3,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
	Members    []*TableMember `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	Created    *Timestamp     `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{19}
}

func (x *TableData) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *TableData) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TableData) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

func (x *TableData) GetMembers() []*TableMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *TableData) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nanos int64 `protobuf:"varint,1,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{20}
}

func (x *Timestamp) GetNanos() int64 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type TableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase        TablePhase  `protobuf:"varint,1,opt,name=phase,proto3,enum=api.TablePhase" json:"phase,omitempty"`
	CurrentMatch *MatchState `protobuf:"bytes,2,opt,name=current_match,json=currentMatch,proto3" json:"current_match,omitempty"`
	Data         *TableData  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TableState) Reset() {
	*x = TableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableState) ProtoMessage() {}

func (x *TableState) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableState.ProtoReflect.Descriptor instead.
func (*TableState) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{21}
}

func (x *TableState) GetPhase() TablePhase {
	if x != nil {
		return x.Phase
	}
	return TablePhase_NOT_STARTED
}

func (x *TableState) GetCurrentMatch() *MatchState {
	if x != nil {
		return x.CurrentMatch
	}
	return nil
}

func (x *TableState) GetData() *TableData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TableMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Online bool   `protobuf:"varint,3,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *TableMember) Reset() {
	*x = TableMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMember) ProtoMessage() {}

func (x *TableMember) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMember.ProtoReflect.Descriptor instead.
func (*TableMember) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{22}
}

func (x *TableMember) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TableMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableMember) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{23}
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{24}
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{25}
}

func (x *RegisterReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckLoginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *CheckLoginReply) Reset() {
	*x = CheckLoginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginReply) ProtoMessage() {}

func (x *CheckLoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginReply.ProtoReflect.Descriptor instead.
func (*CheckLoginReply) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{26}
}

func (x *CheckLoginReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckLoginReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type JoinTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCode string `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
}

func (x *JoinTableRequest) Reset() {
	*x = JoinTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTableRequest) ProtoMessage() {}

func (x *JoinTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTableRequest.ProtoReflect.Descriptor instead.
func (*JoinTableRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{27}
}

func (x *JoinTableRequest) GetInviteCode() string {
	if x != nil {
		return x.InviteCode
	}
	return ""
}

type StartTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *StartTableRequest) Reset() {
	*x = StartTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTableRequest) ProtoMessage() {}

func (x *StartTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTableRequest.ProtoReflect.Descriptor instead.
func (*StartTableRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{28}
}

func (x *StartTableRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type StartNextMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *StartNextMatchRequest) Reset() {
	*x = StartNextMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_karlchen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartNextMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartNextMatchRequest) ProtoMessage() {}

func (x *StartNextMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_karlchen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartNextMatchRequest.ProtoReflect.Descriptor instead.
func (*StartNextMatchRequest) Descriptor() ([]byte, []int) {
	return file_api_karlchen_proto_rawDescGZIP(), []int{29}
}

func (x *StartNextMatchRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

var File_api_karlchen_proto protoreflect.FileDescriptor

var file_api_karlchen_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x61, 0x72, 0x6c, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x44, 0x0a, 0x04, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x52, 0x04, 0x73, 0x75, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22,
	0x26, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22, 0x79, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x72, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x76, 0x6f, 0x72, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x63, 0x6b, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x42, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x64, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x47,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x44, 0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x6f, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x6c, 0x6f, 0x69, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x65,
	0x68, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x65,
	0x68, 0x61, 0x6e, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x1f,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x68,
	0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x46, 0x6f, 0x72, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0xd6, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x01,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x46, 0x61, 0x63, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a,
	0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x33, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x2a, 0x51, 0x0a, 0x0f, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x4f, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x4f, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0x4e, 0x0a,
	0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x31, 0x0a,
	0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x37, 0x0a, 0x04, 0x53, 0x75, 0x69, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4d,
	0x4f, 0x4e, 0x44, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x41, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45,
	0x4e, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x45, 0x10, 0x05, 0x2a, 0x1b, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x10, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x07, 0x42, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x54,
	0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x58,
	0x54, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x48,
	0x49, 0x52, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x5f, 0x53, 0x43, 0x48,
	0x57, 0x41, 0x52, 0x5a, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x54, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x58, 0x54, 0x59, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x54,
	0x48, 0x49, 0x52, 0x54, 0x59, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x5f, 0x53, 0x43, 0x48, 0x57, 0x41, 0x52, 0x5a, 0x10, 0x09, 0x2a, 0x81, 0x01, 0x0a, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52,
	0x52, 0x49, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x41, 0x4d, 0x4f,
	0x4e, 0x44, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x50, 0x41, 0x44, 0x45, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4c, 0x55, 0x42, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x45, 0x41, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x06, 0x32,
	0x91, 0x04, 0x0a, 0x04, 0x44, 0x6f, 0x6b, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x69, 0x64,
	0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_karlchen_proto_rawDescOnce sync.Once
	file_api_karlchen_proto_rawDescData = file_api_karlchen_proto_rawDesc
)

func file_api_karlchen_proto_rawDescGZIP() []byte {
	file_api_karlchen_proto_rawDescOnce.Do(func() {
		file_api_karlchen_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_karlchen_proto_rawDescData)
	})
	return file_api_karlchen_proto_rawDescData
}

var file_api_karlchen_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_karlchen_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_karlchen_proto_goTypes = []interface{}{
	(MemberEventType)(0),          // 0: api.MemberEventType
	(TablePhase)(0),               // 1: api.TablePhase
	(MatchPhase)(0),               // 2: api.MatchPhase
	(Suit)(0),                     // 3: api.Suit
	(Rank)(0),                     // 4: api.Rank
	(Party)(0),                    // 5: api.Party
	(BidType)(0),                  // 6: api.BidType
	(GameType)(0),                 // 7: api.GameType
	(*Card)(nil),                  // 8: api.Card
	(*PlayerValue)(nil),           // 9: api.PlayerValue
	(*PartyValue)(nil),            // 10: api.PartyValue
	(*Declaration)(nil),           // 11: api.Declaration
	(*PlayedCard)(nil),            // 12: api.PlayedCard
	(*Bid)(nil),                   // 13: api.Bid
	(*Event)(nil),                 // 14: api.Event
	(*UserState)(nil),             // 15: api.UserState
	(*MemberEvent)(nil),           // 16: api.MemberEvent
	(*PlayCardRequest)(nil),       // 17: api.PlayCardRequest
	(*PlaceBidRequest)(nil),       // 18: api.PlaceBidRequest
	(*DeclareRequest)(nil),        // 19: api.DeclareRequest
	(*AuctionState)(nil),          // 20: api.AuctionState
	(*Mode)(nil),                  // 21: api.Mode
	(*Trick)(nil),                 // 22: api.Trick
	(*GameState)(nil),             // 23: api.GameState
	(*Cards)(nil),                 // 24: api.Cards
	(*MatchState)(nil),            // 25: api.MatchState
	(*Players)(nil),               // 26: api.Players
	(*TableData)(nil),             // 27: api.TableData
	(*Timestamp)(nil),             // 28: api.Timestamp
	(*TableState)(nil),            // 29: api.TableState
	(*TableMember)(nil),           // 30: api.TableMember
	(*Empty)(nil),                 // 31: api.Empty
	(*RegisterRequest)(nil),       // 32: api.RegisterRequest
	(*RegisterReply)(nil),         // 33: api.RegisterReply
	(*CheckLoginReply)(nil),       // 34: api.CheckLoginReply
	(*JoinTableRequest)(nil),      // 35: api.JoinTableRequest
	(*StartTableRequest)(nil),     // 36: api.StartTableRequest
	(*StartNextMatchRequest)(nil), // 37: api.StartNextMatchRequest
}
var file_api_karlchen_proto_depIdxs = []int32{
	3,  // 0: api.Card.suit:type_name -> api.Suit
	4,  // 1: api.Card.rank:type_name -> api.Rank
	5,  // 2: api.PartyValue.party:type_name -> api.Party
	21, // 3: api.Declaration.definedGameMode:type_name -> api.Mode
	8,  // 4: api.PlayedCard.card:type_name -> api.Card
	9,  // 5: api.PlayedCard.trick_winner:type_name -> api.PlayerValue
	10, // 6: api.PlayedCard.winner:type_name -> api.PartyValue
	6,  // 7: api.Bid.bid:type_name -> api.BidType
	15, // 8: api.Event.welcome:type_name -> api.UserState
	25, // 9: api.Event.start:type_name -> api.MatchState
	11, // 10: api.Event.declared:type_name -> api.Declaration
	12, // 11: api.Event.played_card:type_name -> api.PlayedCard
	13, // 12: api.Event.placed_bid:type_name -> api.Bid
	16, // 13: api.Event.member:type_name -> api.MemberEvent
	29, // 14: api.UserState.currentTable:type_name -> api.TableState
	0,  // 15: api.MemberEvent.type:type_name -> api.MemberEventType
	8,  // 16: api.PlayCardRequest.card:type_name -> api.Card
	6,  // 17: api.PlaceBidRequest.bid:type_name -> api.BidType
	7,  // 18: api.DeclareRequest.declaration:type_name -> api.GameType
	11, // 19: api.AuctionState.declarations:type_name -> api.Declaration
	7,  // 20: api.Mode.type:type_name -> api.GameType
	9,  // 21: api.Mode.soloist:type_name -> api.PlayerValue
	9,  // 22: api.Mode.spouse:type_name -> api.PlayerValue
	8,  // 23: api.Trick.cards:type_name -> api.Card
	9,  // 24: api.Trick.user_id_winner:type_name -> api.PlayerValue
	13, // 25: api.GameState.bids:type_name -> api.Bid
	22, // 26: api.GameState.current_trick:type_name -> api.Trick
	22, // 27: api.GameState.previous_trick:type_name -> api.Trick
	21, // 28: api.GameState.mode:type_name -> api.Mode
	8,  // 29: api.Cards.cards:type_name -> api.Card
	2,  // 30: api.MatchState.phase:type_name -> api.MatchPhase
	9,  // 31: api.MatchState.turn:type_name -> api.PlayerValue
	26, // 32: api.MatchState.players:type_name -> api.Players
	31, // 33: api.MatchState.spectator:type_name -> api.Empty
	24, // 34: api.MatchState.own_cards:type_name -> api.Cards
	20, // 35: api.MatchState.auction_state:type_name -> api.AuctionState
	23, // 36: api.MatchState.game_state:type_name -> api.GameState
	30, // 37: api.TableData.members:type_name -> api.TableMember
	28, // 38: api.TableData.created:type_name -> api.Timestamp
	1,  // 39: api.TableState.phase:type_name -> api.TablePhase
	25, // 40: api.TableState.current_match:type_name -> api.MatchState
	27, // 41: api.TableState.data:type_name -> api.TableData
	32, // 42: api.Doko.Register:input_type -> api.RegisterRequest
	31, // 43: api.Doko.CheckLogin:input_type -> api.Empty
	31, // 44: api.Doko.CreateTable:input_type -> api.Empty
	36, // 45: api.Doko.StartTable:input_type -> api.StartTableRequest
	35, // 46: api.Doko.JoinTable:input_type -> api.JoinTableRequest
	17, // 47: api.Doko.PlayCard:input_type -> api.PlayCardRequest
	18, // 48: api.Doko.PlaceBid:input_type -> api.PlaceBidRequest
	19, // 49: api.Doko.Declare:input_type -> api.DeclareRequest
	37, // 50: api.Doko.StartNextMatch:input_type -> api.StartNextMatchRequest
	31, // 51: api.Doko.StartSession:input_type -> api.Empty
	33, // 52: api.Doko.Register:output_type -> api.RegisterReply
	34, // 53: api.Doko.CheckLogin:output_type -> api.CheckLoginReply
	27, // 54: api.Doko.CreateTable:output_type -> api.TableData
	25, // 55: api.Doko.StartTable:output_type -> api.MatchState
	29, // 56: api.Doko.JoinTable:output_type -> api.TableState
	12, // 57: api.Doko.PlayCard:output_type -> api.PlayedCard
	13, // 58: api.Doko.PlaceBid:output_type -> api.Bid
	11, // 59: api.Doko.Declare:output_type -> api.Declaration
	25, // 60: api.Doko.StartNextMatch:output_type -> api.MatchState
	14, // 61: api.Doko.StartSession:output_type -> api.Event
	52, // [52:62] is the sub-list for method output_type
	42, // [42:52] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_api_karlchen_proto_init() }
func file_api_karlchen_proto_init() {
	if File_api_karlchen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_karlchen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Declaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Players); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_karlchen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartNextMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_karlchen_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Event_Welcome)(nil),
		(*Event_Start)(nil),
		(*Event_Declared)(nil),
		(*Event_PlayedCard)(nil),
		(*Event_PlacedBid)(nil),
		(*Event_Member)(nil),
	}
	file_api_karlchen_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*MatchState_Spectator)(nil),
		(*MatchState_OwnCards)(nil),
		(*MatchState_AuctionState)(nil),
		(*MatchState_GameState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_karlchen_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_karlchen_proto_goTypes,
		DependencyIndexes: file_api_karlchen_proto_depIdxs,
		EnumInfos:         file_api_karlchen_proto_enumTypes,
		MessageInfos:      file_api_karlchen_proto_msgTypes,
	}.Build()
	File_api_karlchen_proto = out.File
	file_api_karlchen_proto_rawDesc = nil
	file_api_karlchen_proto_goTypes = nil
	file_api_karlchen_proto_depIdxs = nil
}
