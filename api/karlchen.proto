syntax = "proto3";

package api;
//option go_package = "github.com/supermihi/karlchencloud/api";
option go_package = ".;api";
service Karlchencloud {
    rpc Register (RegisterRequest) returns (RegisterReply) {
    }

    rpc CheckLogin (Empty) returns (OkOrNot) {
    }

    rpc ListTables (Empty) returns (TableList) {
    }

    rpc CreateTable (Empty) returns (TableData) {
    }

    rpc StartTable (TableId) returns (Empty) {
    }

    rpc JoinTable (JoinTableRequest) returns (TableState) {
    }

    rpc Play (PlayRequest) returns (Empty) {

    }

    rpc SubscribeMatchEvents (TableId) returns (stream MatchEventStream) {
    }

    rpc GetMatchState (TableId) returns (MatchState) {
    }
}

message Card {
    Suit suit = 1;
    Rank rank = 2;
}

message Declaration {
    Player player = 1;
    bool vorbehalt = 2;
}

message PlayedCard {
    Player player = 1;
    Card card = 2;
}

message Bid {
    Player player = 1;
    BidType bid = 3;
}

message EndOfGame {
    Party winner = 1;
    int32 value = 2;
}

message MatchEventStream {
    oneof event {
        MatchState start = 1;
        Declaration declared = 2;
        Mode mode_defined = 3;
        PlayedCard played_card = 4;
        Bid placed_bid = 5;
        EndOfGame ended = 6;
        MemberEvent member = 7;
    }
}

enum MemberEventType {
    JOIN_TABLE = 0;
    LEAVE_TABLE = 1;
    GO_OFFLINE = 2;
    GO_ONLINE = 3;
}
message MemberEvent {
    string userId = 1;
    MemberEventType type = 2;
}

message PlayRequest {
    oneof request {
        GameType declaration = 2;
        BidType bid = 3;
        Card card = 4;
    }
    string table = 5;
}
message PlayerParty {
    Player player = 1;
    Party party = 2;
}

message AuctionState {
    repeated Declaration declarations = 1;
    Player turn = 2;
}

message Mode {
    GameType type = 1;
    Player soloist = 2;
    Player spouse = 3;
}

message Trick {
    Card card_player_1 = 1;
    Card card_player_2 = 2;
    Card card_player_3 = 3;
    Card card_player_4 = 4;
    Player forehand = 5;
    Player winner = 6;
}

message GameState {
    repeated Bid bids = 1;
    int32 CompletedTricks = 2;
    Trick current_trick = 3;
    Trick previous_trick = 4;
    Mode mode = 5;
}

message MatchPlayerData {
    repeated Card cards = 1;
    Player player = 2;
}

message MatchState {
    MatchPhase phase = 1;
    Player turn = 2;
    Players players = 3;
    oneof role {
        Empty spectator = 4;
        MatchPlayerData player_data = 5;
    }
    oneof details {
        AuctionState auction_state = 6;
        GameState game_state = 7;
    }
}

message Players {
    string player_1 = 1;
    string player_2 = 2;
    string player_3 = 3;
    string player_4 = 4;
}

message TableState {
    oneof state {
        MatchState in_match = 1;
        Empty no_match = 2;
    }
    repeated TableMember Users = 3;
}

message TableMember {
    string id = 1;
    string name = 2;
    bool online = 3;
}


message Empty {

}

message OkOrNot {
    bool value = 1;
}

message RegisterRequest {
    string name = 1;
}

message RegisterReply {
    string id = 1;
    string secret = 2;
}

message TableId {
    string value = 1;
}

message TableData {
    string table_id = 1;
    string owner = 2;
    string invite_code = 3;
}

message TableList {
    repeated TableData tables = 1;
}

message JoinTableRequest {
    string table_id = 1;
    string invite_code = 2;
}


enum MatchPhase {
    AUCTION = 0;
    GAME = 1;
    FINISHED = 2;
}
enum Suit {
    DIAMONDS = 0;
    HEARTS = 1;
    SPADES = 2;
    CLUBS = 3;
}

enum Rank {
    NINE = 0;
    JACK = 1;
    QUEEN = 2;
    KING = 3;
    TEN = 4;
    ACE = 5;
}


enum Player {
    PLAYER_1 = 0;
    PLAYER_2 = 1;
    PLAYER_3 = 2;
    PLAYER_4 = 3;
}

enum Party {
    RE = 0;
    CONTRA = 1;
}

enum BidType {
    RE_BID = 0;
    CONTRA_BID = 1;
    RE_NO_NINETY = 2;
    RE_NO_SIXTY = 3;
    RE_NO_THIRTY = 4;
    RE_SCHWARZ = 5;
    CONTRA_NO_NINETY = 6;
    CONTRA_NO_SIXTY = 7;
    CONTRA_NO_THIRTY = 8;
    CONTRA_SCHWARZ = 9;
}


enum GameType {
    NORMAL_GAME = 0;
    MARRIAGE = 1;
    DIAMONDS_SOLO = 2;
    HEARTS_SOLO = 3;
    SPADES_SOLO = 4;
    CLUBS_SOLO = 5;
    MEATLESS_SOLO = 6;
}
