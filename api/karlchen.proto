syntax = "proto3";

package api;
//option go_package = "github.com/supermihi/karlchencloud/api";
option go_package = ".;api";
service Doko {
    rpc Register (UserName) returns (RegisterReply) {
    }

    rpc CheckLogin (Empty) returns (UserName) {
    }

    rpc GetUserState (Empty) returns (UserState) {
    }

    rpc CreateTable (Empty) returns (TableData) {
    }

    rpc StartTable (TableId) returns (Empty) {
    }

    rpc JoinTable (JoinTableRequest) returns (Empty) {
    }

    rpc Play (PlayRequest) returns (Empty) {
    }

    rpc SubscribeMatchEvents (TableId) returns (stream MatchEvent) {
    }

    rpc GetTableState (TableId) returns (TableState) {
    }
}

message Card {
    Suit suit = 1;
    Rank rank = 2;
}

message PlayerValue {
    string user_id = 1;
}

message Declaration {
    string user_id = 1;
    bool vorbehalt = 2;
    Mode definedGameMode = 3;
}

message PlayedCard {
    string user_id = 1;
    Card card = 2;
    PlayerValue trick_winner = 3;
}

message Bid {
    string user_id = 1;
    BidType bid = 3;
}

message EndOfGame {
    Party winner = 1;
    int32 value = 2;
}

message MatchEvent {
    oneof event {
        TableState welcome = 1;
        MatchState start = 2;
        Declaration declared = 3;
        PlayedCard played_card = 4;
        Bid placed_bid = 5;
        EndOfGame ended = 6;
        MemberEvent member = 7;
    }
}

message UserState {
    TableState currentTable = 1;
}
enum MemberEventType {
    JOIN_TABLE = 0;
    LEAVE_TABLE = 1;
    GO_OFFLINE = 2;
    GO_ONLINE = 3;
}
message MemberEvent {
    string user_id = 1;
    string name = 2;
    MemberEventType type = 3;
}

message PlayRequest {
    oneof request {
        GameType declaration = 2;
        BidType bid = 3;
        Card card = 4;
    }
    string table = 5;
}

message AuctionState {
    repeated Declaration declarations = 1;
}

message Mode {
    GameType type = 1;
    PlayerValue soloist = 2;
    PlayerValue spouse = 3;
    string forehand = 4;
}

message Trick {
    repeated Card cards = 1;
    string user_id_forehand = 5;
    PlayerValue user_id_winner = 6;
}

message GameState {
    repeated Bid bids = 1;
    int32 completed_tricks = 2;
    Trick current_trick = 3;
    Trick previous_trick = 4;
    Mode mode = 5;
}

message Cards {
    repeated Card cards = 1;
}

message MatchState {
    MatchPhase phase = 1;
    PlayerValue turn = 2;
    Players players = 3;
    oneof role {
        Empty spectator = 4;
        Cards own_cards = 5;
    }
    oneof details {
        AuctionState auction_state = 6;
        GameState game_state = 7;
    }
}

message Players {
    string user_id_self = 1;
    string user_id_left = 2;
    string user_id_face = 3;
    string user_id_right = 4;
}

message TableData {
    string table_id = 1;
    string owner = 2;
    string invite_code = 3;
    repeated TableMember members = 4;
}

message TableState {
    oneof state {
        MatchState in_match = 1;
        Empty no_match = 2;
    }
    TableData data = 3;
}

message TableMember {
    string user_id = 1;
    string name = 2;
    bool online = 3;
}


message Empty {

}

message UserName {
    string name = 1;
}

message RegisterReply {
    string id = 1;
    string secret = 2;
}

message TableId {
    string value = 1;
}


message JoinTableRequest {
    string table_id = 1;
    string invite_code = 2;
}


enum MatchPhase {
    AUCTION = 0;
    GAME = 1;
    FINISHED = 2;
}
enum Suit {
    DIAMONDS = 0;
    HEARTS = 1;
    SPADES = 2;
    CLUBS = 3;
}

enum Rank {
    NINE = 0;
    JACK = 1;
    QUEEN = 2;
    KING = 3;
    TEN = 4;
    ACE = 5;
}


enum Party {
    RE = 0;
    CONTRA = 1;
}

enum BidType {
    RE_BID = 0;
    CONTRA_BID = 1;
    RE_NO_NINETY = 2;
    RE_NO_SIXTY = 3;
    RE_NO_THIRTY = 4;
    RE_SCHWARZ = 5;
    CONTRA_NO_NINETY = 6;
    CONTRA_NO_SIXTY = 7;
    CONTRA_NO_THIRTY = 8;
    CONTRA_SCHWARZ = 9;
}


enum GameType {
    NORMAL_GAME = 0;
    MARRIAGE = 1;
    DIAMONDS_SOLO = 2;
    HEARTS_SOLO = 3;
    SPADES_SOLO = 4;
    CLUBS_SOLO = 5;
    MEATLESS_SOLO = 6;
}
