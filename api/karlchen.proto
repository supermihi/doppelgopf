syntax = "proto3";

package api;
//option go_package = "github.com/supermihi/karlchencloud/api";
option go_package = ".;api";
import "api/enums.proto";
service Karlchencloud {
    rpc Register (RegisterRequest) returns (RegisterReply) {
    }

    rpc CheckLogin (Empty) returns (OkOrNot) {
    }

    rpc ListTables (Empty) returns (TableList) {
    }

    rpc CreateTable (Empty) returns (TableData) {
    }

    rpc StartTable (TableId) returns (Empty) {
    }

    rpc JoinTable (JoinTableRequest) returns (Empty) {
    }

    rpc SubscribeMatchEvents (TableId) returns (stream MatchEvent) {
    }

    rpc GetMatchState (TableId) returns (MyMatchState) {
    }
}

message Card {
    Suit suit = 1;
    Rank rank = 2;
}

message Declaration {
    Player player = 1;
    bool vorbehalt = 2;
}

message PlayedCard {
    Player player = 1;
    Card card = 2;
}

message Bid {
    Player player = 1;
    BidType bid = 3;
}

message EndOfGame {
    Party winner = 1;
    int32 value = 2;
}

message MatchEvent {
    oneof event {
        Declaration declared = 1;
        PlayedCard played_card = 3;
        Bid placed_bid = 4;
        EndOfGame ended = 5;
    }
    MatchState new_state = 10;
    int32 serial_no = 11;
}
message PlayerParty {
    Player player = 1;
    Party party = 2;
}
enum AuctionPhase {
    DECLARATION = 0;
    SPECIFICATION = 1;
}

message AuctionState {
    AuctionPhase phase = 1;
    repeated Declaration declarations = 2;
}


message SoloInfo {
    Player soloist = 1;
    SoloType solo_type = 2;
}
message Mode {
    GameType type = 1;
    SoloInfo solo_info = 2;
}

message Trick {
    Card card_player_1 = 1;
    Card card_player_2 = 2;
    Card card_player_3 = 3;
    Card card_player_4 = 4;
    Player forehand = 5;
    Player winner = 6;
}

message GameState {
    repeated Bid bids = 1;
    int32 CompletedTricks = 2;
    Trick current_trick = 3;
    Trick previous_trick = 4;
    Mode mode = 5;
}

message MatchState {
    MatchPhase phase = 1;
    Player turn = 2;
    oneof details {
        AuctionState auction_state = 3;
        GameState game_state = 4;
    }
}

message MyMatchState {
    MatchState match_state = 1;
    oneof role {
        Player my_plader = 2;
        Empty not_playing = 3;
    }
    repeated Card hand_cards = 4;
}

message Empty {

}

message OkOrNot {
    bool value = 1;
}

message RegisterRequest {
    string name = 1;
}

message RegisterReply {
    string id = 1;
    string secret = 2;
}

message TableId {
    string value = 1;
}

message TableData {
    string table_id = 1;
    string owner = 2;
    string invite_code = 3;
}

message TableList {
    repeated TableData tables = 1;
}

message JoinTableRequest {
    string table_id = 1;
    string invite_code = 2;
}

