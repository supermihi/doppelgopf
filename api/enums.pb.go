// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: api/enums.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MatchPhase int32

const (
	MatchPhase_AUCTION  MatchPhase = 0
	MatchPhase_GAME     MatchPhase = 1
	MatchPhase_FINISHED MatchPhase = 2
)

// Enum value maps for MatchPhase.
var (
	MatchPhase_name = map[int32]string{
		0: "AUCTION",
		1: "GAME",
		2: "FINISHED",
	}
	MatchPhase_value = map[string]int32{
		"AUCTION":  0,
		"GAME":     1,
		"FINISHED": 2,
	}
)

func (x MatchPhase) Enum() *MatchPhase {
	p := new(MatchPhase)
	*p = x
	return p
}

func (x MatchPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[0].Descriptor()
}

func (MatchPhase) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[0]
}

func (x MatchPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchPhase.Descriptor instead.
func (MatchPhase) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{0}
}

type Suit int32

const (
	Suit_DIAMONDS Suit = 0
	Suit_HEARTS   Suit = 1
	Suit_SPADES   Suit = 2
	Suit_CLUBS    Suit = 3
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0: "DIAMONDS",
		1: "HEARTS",
		2: "SPADES",
		3: "CLUBS",
	}
	Suit_value = map[string]int32{
		"DIAMONDS": 0,
		"HEARTS":   1,
		"SPADES":   2,
		"CLUBS":    3,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[1].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[1]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{1}
}

type Rank int32

const (
	Rank_NINE  Rank = 0
	Rank_JACK  Rank = 1
	Rank_QUEEN Rank = 2
	Rank_KING  Rank = 3
	Rank_TEN   Rank = 4
	Rank_ACE   Rank = 5
)

// Enum value maps for Rank.
var (
	Rank_name = map[int32]string{
		0: "NINE",
		1: "JACK",
		2: "QUEEN",
		3: "KING",
		4: "TEN",
		5: "ACE",
	}
	Rank_value = map[string]int32{
		"NINE":  0,
		"JACK":  1,
		"QUEEN": 2,
		"KING":  3,
		"TEN":   4,
		"ACE":   5,
	}
)

func (x Rank) Enum() *Rank {
	p := new(Rank)
	*p = x
	return p
}

func (x Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[2].Descriptor()
}

func (Rank) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[2]
}

func (x Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rank.Descriptor instead.
func (Rank) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{2}
}

type Player int32

const (
	Player_PLAYER_1 Player = 0
	Player_PLAYER_2 Player = 1
	Player_PLAYER_3 Player = 2
	Player_PLAYER_4 Player = 3
)

// Enum value maps for Player.
var (
	Player_name = map[int32]string{
		0: "PLAYER_1",
		1: "PLAYER_2",
		2: "PLAYER_3",
		3: "PLAYER_4",
	}
	Player_value = map[string]int32{
		"PLAYER_1": 0,
		"PLAYER_2": 1,
		"PLAYER_3": 2,
		"PLAYER_4": 3,
	}
)

func (x Player) Enum() *Player {
	p := new(Player)
	*p = x
	return p
}

func (x Player) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Player) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[3].Descriptor()
}

func (Player) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[3]
}

func (x Player) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Player.Descriptor instead.
func (Player) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{3}
}

type Party int32

const (
	Party_RE     Party = 0
	Party_CONTRA Party = 1
)

// Enum value maps for Party.
var (
	Party_name = map[int32]string{
		0: "RE",
		1: "CONTRA",
	}
	Party_value = map[string]int32{
		"RE":     0,
		"CONTRA": 1,
	}
)

func (x Party) Enum() *Party {
	p := new(Party)
	*p = x
	return p
}

func (x Party) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Party) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[4].Descriptor()
}

func (Party) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[4]
}

func (x Party) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Party.Descriptor instead.
func (Party) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{4}
}

type BidType int32

const (
	BidType_RE_BID           BidType = 0
	BidType_CONTRA_BID       BidType = 1
	BidType_RE_NO_NINETY     BidType = 2
	BidType_RE_NO_SIXTY      BidType = 3
	BidType_RE_NO_THIRTY     BidType = 4
	BidType_RE_SCHWARZ       BidType = 5
	BidType_CONTRA_NO_NINETY BidType = 6
	BidType_CONTRA_NO_SIXTY  BidType = 7
	BidType_CONTRA_NO_THIRTY BidType = 8
	BidType_CONTRA_SCHWARZ   BidType = 9
)

// Enum value maps for BidType.
var (
	BidType_name = map[int32]string{
		0: "RE_BID",
		1: "CONTRA_BID",
		2: "RE_NO_NINETY",
		3: "RE_NO_SIXTY",
		4: "RE_NO_THIRTY",
		5: "RE_SCHWARZ",
		6: "CONTRA_NO_NINETY",
		7: "CONTRA_NO_SIXTY",
		8: "CONTRA_NO_THIRTY",
		9: "CONTRA_SCHWARZ",
	}
	BidType_value = map[string]int32{
		"RE_BID":           0,
		"CONTRA_BID":       1,
		"RE_NO_NINETY":     2,
		"RE_NO_SIXTY":      3,
		"RE_NO_THIRTY":     4,
		"RE_SCHWARZ":       5,
		"CONTRA_NO_NINETY": 6,
		"CONTRA_NO_SIXTY":  7,
		"CONTRA_NO_THIRTY": 8,
		"CONTRA_SCHWARZ":   9,
	}
)

func (x BidType) Enum() *BidType {
	p := new(BidType)
	*p = x
	return p
}

func (x BidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[5].Descriptor()
}

func (BidType) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[5]
}

func (x BidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BidType.Descriptor instead.
func (BidType) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{5}
}

type GameType int32

const (
	GameType_NORMAL_GAME     GameType = 0
	GameType_MARRIAGE        GameType = 1
	GameType_VOLUNTARY_SOLO  GameType = 2
	GameType_COMPULSORY_SOLO GameType = 3
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "NORMAL_GAME",
		1: "MARRIAGE",
		2: "VOLUNTARY_SOLO",
		3: "COMPULSORY_SOLO",
	}
	GameType_value = map[string]int32{
		"NORMAL_GAME":     0,
		"MARRIAGE":        1,
		"VOLUNTARY_SOLO":  2,
		"COMPULSORY_SOLO": 3,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[6].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[6]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{6}
}

type SoloType int32

const (
	SoloType_DIAMONDS_SOLO SoloType = 0
	SoloType_HEARTS_SOLO   SoloType = 1
	SoloType_SPADES_SOLO   SoloType = 2
	SoloType_CLUBS_SOLO    SoloType = 3
	SoloType_MEATLESS_SOLO SoloType = 4
)

// Enum value maps for SoloType.
var (
	SoloType_name = map[int32]string{
		0: "DIAMONDS_SOLO",
		1: "HEARTS_SOLO",
		2: "SPADES_SOLO",
		3: "CLUBS_SOLO",
		4: "MEATLESS_SOLO",
	}
	SoloType_value = map[string]int32{
		"DIAMONDS_SOLO": 0,
		"HEARTS_SOLO":   1,
		"SPADES_SOLO":   2,
		"CLUBS_SOLO":    3,
		"MEATLESS_SOLO": 4,
	}
)

func (x SoloType) Enum() *SoloType {
	p := new(SoloType)
	*p = x
	return p
}

func (x SoloType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoloType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_proto_enumTypes[7].Descriptor()
}

func (SoloType) Type() protoreflect.EnumType {
	return &file_api_enums_proto_enumTypes[7]
}

func (x SoloType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoloType.Descriptor instead.
func (SoloType) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_proto_rawDescGZIP(), []int{7}
}

var File_api_enums_proto protoreflect.FileDescriptor

var file_api_enums_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x2a, 0x31, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x04, 0x53, 0x75, 0x69,
	0x74, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x50, 0x41, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x55, 0x42, 0x53,
	0x10, 0x03, 0x2a, 0x41, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x49,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x43, 0x45, 0x10, 0x05, 0x2a, 0x40, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x33, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x34, 0x10, 0x03, 0x2a, 0x1b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x06, 0x0a, 0x02, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x10, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x58, 0x54, 0x59, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x54, 0x59, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x57, 0x41, 0x52, 0x5a, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e,
	0x49, 0x4e, 0x45, 0x54, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x58, 0x54, 0x59, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x54, 0x59,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x43, 0x48,
	0x57, 0x41, 0x52, 0x5a, 0x10, 0x09, 0x2a, 0x52, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x53,
	0x4f, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x4c, 0x53,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x03, 0x2a, 0x62, 0x0a, 0x08, 0x53, 0x6f,
	0x6c, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50,
	0x41, 0x44, 0x45, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4c, 0x55, 0x42, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x45, 0x41, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10, 0x04, 0x42, 0x28,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x68, 0x69, 0x2f, 0x6b, 0x61, 0x72, 0x6c, 0x63, 0x68, 0x65, 0x6e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_enums_proto_rawDescOnce sync.Once
	file_api_enums_proto_rawDescData = file_api_enums_proto_rawDesc
)

func file_api_enums_proto_rawDescGZIP() []byte {
	file_api_enums_proto_rawDescOnce.Do(func() {
		file_api_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_enums_proto_rawDescData)
	})
	return file_api_enums_proto_rawDescData
}

var file_api_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_enums_proto_goTypes = []interface{}{
	(MatchPhase)(0), // 0: api.MatchPhase
	(Suit)(0),       // 1: api.Suit
	(Rank)(0),       // 2: api.Rank
	(Player)(0),     // 3: api.Player
	(Party)(0),      // 4: api.Party
	(BidType)(0),    // 5: api.BidType
	(GameType)(0),   // 6: api.GameType
	(SoloType)(0),   // 7: api.SoloType
}
var file_api_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_enums_proto_init() }
func file_api_enums_proto_init() {
	if File_api_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_enums_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_enums_proto_goTypes,
		DependencyIndexes: file_api_enums_proto_depIdxs,
		EnumInfos:         file_api_enums_proto_enumTypes,
	}.Build()
	File_api_enums_proto = out.File
	file_api_enums_proto_rawDesc = nil
	file_api_enums_proto_goTypes = nil
	file_api_enums_proto_depIdxs = nil
}
